{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Native 0.59 版本发布了","desc":"React Native 的 0.59 版本发布了！在这个版本中有来自 88 个贡献者中的 644 个提交(Maxiee 注：其中一个是我提交的~）。React Hooks、Android 64位 JSC、提高启动速度、瘦内核、CLI 增强。","type":"md","link":"ReactNative059md","create":"2019-04-09","filename":"ReactNative0.59.md"},"content":"## 前言\n\n本文的原作者是 [Ryan Turner](https://twitter.com/turnrye)，文章源链接为 [Releasing React Native 0.59](https://facebook.github.io/react-native/blog/2019/03/12/releasing-react-native-059)，我将其翻译为中文，并对非关键信息做了一定的删减。\n\nReact Native 的 0.59 版本发布了！在这个版本中有来自 88 个贡献者中的 644 个提交(Maxiee 注：其中一个是我提交的~）。React Hooks、Android 64位 JSC、提高启动速度、瘦内核、CLI 增强。\n\n贡献不仅来自提交，也来自其他方式，包括维护 issues，参与社区，教授别人 React Native 等等。\n\n这一版本带来很多大的改变。\n\n## 🎣 Hooks 来了\n\n在这个版本中带来了 React Hooks，它让你在组件间复用状态相关的逻辑。\n\n关于 Hooks 的资料很多，如果你之前没有听说过，可以看看这些资源：\n\n- [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html)：为什么 React 要添加 Hooks 这种机制\n- [Hooks at a Glance](https://reactjs.org/docs/hooks-overview.html)：快速对内置 Hooks 有一个整体概念\n- [Building Your Own Hooks](https://reactjs.org/docs/hooks-custom.html)：示范如何通过自定义 Hooks 进行代码复用\n- [Making Sense of React Hooks](https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889)：有了 Hooks 带来的新的可能性\n- [useHooks.com](https://usehooks.com/)：社区维护的 Hooks 用法示范与 Demo\n\n一定要自己写个 Demo 试试，体验下激动人心的复用效果。\n\n## 📱更新了 JSC，带来性能提升和 Android 的 64 位支持\n\nReact Native 使用 JSC ([JavaScriptCore](https://webkit.org/)) 作为 JS 引擎。\n\nAndroid 上的 JSC 已经是几年前的了，很多现代 JavaScript 它都不支持。\n\n更差的是，它的性能跟 iOS 上的现代 JSC 相比差很多。\n\n在这个版本中，这个问题得到了极大改善。\n\n感谢来自  [@DanielZlotin](https://github.com/danielzlotin), [@dulmandakh](https://github.com/dulmandakh), [@gengjiawen](https://github.com/gengjiawen), [@kmagiera](https://github.com/kmagiera) 和 [@kudo](https://github.com/kudo) 的给力成果，将 JSC 从几年前的版本赶上来了。\n\n这带来了 64 位支持、现代 JavaScript 支持，以及巨大的性能提升 [big performance improvements](https://github.com/react-native-community/jsc-android-buildscripts/tree/master/measure)。\n\nKudos 将这个过程变成了一个可维护的过程，这样我们可以方便地在未来引入 WebKit 的增强，还要感谢 Software Mansion 和 Expo。\n\n## 💨 使用 inline requires 更快的 APP 启动\n\n我们想默认帮助人们提高 React Native 的性能，因此我们正在将 Facebook 内的优化方式带到社区中。\n\n应用加载按需资源，避免降低启动速度。这个特性叫 inline requires，它让 Metro 辨别懒加载的组件。\n\n层次深且组件多变的 APP 将会感受到明显的提升。\n\n![](image/ReactNative0.5901.png)\n\n在将其作为默认选项之前，我们需要社区向我们反馈它的效果。\n\n当你升级到 0.59 后，会有一个新的 metro.config.js 配置文件，将选项设为 true 进行体验，并向我们[反馈效果](https://twitter.com/hashtag/inline-requires)。\n\n更多关于 inline requires 请参见[文档](https://facebook.github.io/react-native/docs/0.56/performance#inline-requires)，来测试 APP 的性能。\n\n## 🚅 瘦内核正在进行中\n\nReact Native 是一个大型的复杂项目，代码仓库也很复杂。\n\n这使得 React Native 的代码难以让贡献者参与，难以测试，并且作为开发依赖也很臃肿。\n\n[瘦内核](https://github.com/react-native-community/discussions-and-proposals/issues/6)是我们解决这一问题的努力，通过将部分代码分离到单独的库当中，来获得更好的可维护性。\n\n在过去几个版本中已经可以看到第一步的努力，但是[重要的](https://www.youtube.com/watch?v=FMLKb4or8yg)还在后面。\n\n你会注意到一些组件被官方废弃了。\n\n这是好消息，因为现在他们都有了活跃的维护者。\n\n如果看到警告信息，请迁移到新的库中，React Native 在未来会删除这些组件。\n\n下面是要废弃的组件的列表：\n\n| 组件                 | 废弃版本 | 新仓库                                                       |\n| -------------------- | -------- | ------------------------------------------------------------ |\n| **AsyncStorage**     | 0.59     | [@react-native-community/react-native-async-storage](https://github.com/react-native-community/react-native-async-storage) |\n| **ImageStore**       | 0.59     | [expo-file-system](https://github.com/expo/expo/tree/master/packages/expo-file-system) or [react-native-fs](https://github.com/itinance/react-native-fs) |\n| **MaskedViewIOS**    | 0.59     | [@react-native-community/react-native-masked-view](https://github.com/react-native-community/react-native-masked-view) |\n| **NetInfo**          | 0.59     | [@react-native-community/react-native-netinfo](https://github.com/react-native-community/react-native-netinfo) |\n| **Slider**           | 0.59     | [@react-native-community/react-native-slider](https://github.com/react-native-community/react-native-slider) |\n| **ViewPagerAndroid** | 0.59     | [@react-native-community/react-native-viewpager](https://github.com/react-native-community/react-native-viewpager) |\n\n在接下来几个月中，会有更多组件从内核中废弃，以实现瘦内核。我们需要这方面的帮助，参见 [lean core umbrella](https://github.com/facebook/react-native/issues/23313)。\n\n## 👩🏽‍💻 CLI 增强\n\nReact Native 的命令行工具是开发者进入生态的入口点，但是由于缺乏官方支持，导致长期存在很多问题。\n\nCLI 工具被迁移到一个[新项目](https://github.com/react-native-community/react-native-cli)，由一群[专门的维护者](https://blog.callstack.io/the-react-native-cli-has-a-new-home-79b63838f0e6)进行维护，并带来了很多新特性。\n\nLog 的格式变得更好了。命令的执行速度也变快了。\n\n## 🚀 升级到 0.59\n\n我们收到了大家关于[升级过程](https://github.com/react-native-community/discussions-and-proposals/issues/68)的反馈，会在[未来的版本](https://github.com/react-native-community/discussions-and-proposals/issues/64#issuecomment-444775432)中改善这些体验。\n\n我们建议使用  [`rn-diff-purge`](https://github.com/react-native-community/rn-diff-purge) 来确认你当前的 RN 版本与 0.59 有哪些差异，并手动应用改动。\n\n一旦升级到 0.59，就可以使用新的增强的 react-native upgrade 命令(基于 [`rn-diff-purge`](https://github.com/react-native-community/rn-diff-purge))来升到 0.60 甚至更新的版本。\n\n## 🔨 破坏性的变化\n\n0.59 的 Android 版本进行了清理，以遵循 Google 的最新建议，这导致对现有 APP 会有破坏性变化。\n\n这个问题会导致一个运行时崩溃，并带有一个消息：\"You need to use a Theme.AppCompat theme (or descendant) with this activity\"。\n\n我们建议你更新项目的 AndroidManifest.xml 文件，并确保 android:theme 的值是一个 AppCompat 主题，例如 `@style/Theme.AppCompat.Light.NoActionBar`。\n\nreact-native-git-upgrade 命令在 0.59 中被删除，之后都使用改进的 react-native upgrade 命令。\n\n## 🤗 感谢\n\n大量新的贡献者参与了 [enabling generation of native code from flow types](https://github.com/facebook/react-native/issues/22990) 和 [resolving Xcode warnings](https://github.com/facebook/react-native/issues/22609)，这些是学习 React Native 工作方式的很好的方，贡献也是非常棒！谢谢你们。\n\nchangelog 请参见[这里](https://github.com/react-native-community/react-native-releases/blob/master/CHANGELOG.md)。0.59 是一个非常大的版本，我们期待你的使用！"},"path":"post/ReactNative059md"}
