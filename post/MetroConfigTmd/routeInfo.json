{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Native Metro 学习笔记 2 -- Metro ConfigT","desc":"Metro 整体上采用 C/S 结构，它对外暴露一个 Metro Server 类。Server 会在构造的时候接受一个结构，用于配置它内部的行为，这个结构是我们操纵 Server 内部行为的主要途径。因此想要正确控制打包器的话，首先要创建正确的配置结构，这个结构在 Metro 中称为 ConfigT。它定义于 metro-config 包的 configTypes.flow.js 中。","type":"md","link":"MetroConfigTmd","create":"2018-11-08","filename":"MetroConfigT.md"},"content":"## 介绍\n\nMetro 整体上采用 C/S 结构，它对外暴露一个 Metro Server 类。Server 会在构造的时候接受一个结构，用于配置它内部的行为，这个结构是我们操纵 Server 内部行为的主要途径。\n\n因此想要正确控制打包器的话，首先要创建正确的配置结构，这个结构在 Metro 中称为 **ConfigT**。它定义于 metro-config 包的 configTypes.flow.js 中。\n\n>  提示：在看 Metro 代码的时候，最好从 GitHub 上 clone 一份，而不要去 React Native APP 工程下的 node_modules/metro 中查看，因为后者是经过构建之后的，可读性已经大大降低了。\n\n在这篇文章中，我们来梳理一下 ConfigT 结构。\n\n## 整体结构\n\nConfigT 非常复杂，从整体上，它分为以下几个子结构：\n\n- MetalConfigT\n- ResolverConfigT\n- ServerConfigT\n- SerializerConfigT\n- TransformerConfigT\n\n其中：\n\n- MetalConfigT 在 configT 中是展开在最顶层的\n- 后面三个则有对应的子结构\n\n因此，configT 从整体上看结构如下：\n\n```js\n{\n    resolver: {\n        // ResolverConfigT\n    },\n    server: {\n\t\t// ServerConfigT\n    },\n    serializer: {\n    \t// SerializerConfigT\n    },\n    transformer: {\n        // TransformerConfigT\n    },\n    // MetalConfigT 在跟层展开\n}\n```\n\n在 node_modules/metro-config/src/defaults/index.js 下有一份默认值。\n\n## MetalConfigT\n\nMetalConfigT 包含以下字段：\n\n| 字段            | 说明             |\n| --------------- | ---------------- |\n| cacheStores     | 缓存类           |\n| cacheVersion    | 缓存版本         |\n| maxWorkers      | 并发构建时数     |\n| projectRoot     | 项目根目录       |\n| stickyWorkers   |                  |\n| transformerPath | transformer 路径 |\n| reporter        | 日志记录器       |\n| resetCache      | 是否清空缓存     |\n| watchFolders    | 源文件的全集     |\n\n### cacheStores & cacheVersion\n\ncacheStores 是缓存类，默认值是 FileStore。其中 FileStore 定义在 metro-cache 包中。\n\ncacheVersion 是缓存版本，默认值是 '1.0'。\n\n### projectRoot\n\n项目根目录，如果没指定的话，默认是从脚本运行 metro 所在的位置向上两个层级作为根目录。\n\n### stickyWorkers\n\n用于 node_modules/metro/src/DeltaBundler/WorkerFarm.js 的 JestWorker。\n\n### transformerPath\n\n默认是 metro/src/JSTransformer/worker.js。\n\ntransformer 的功能是编译源文件，内部通过调用 babel 来实现编译功能。\n\n### reporter\n\n默认值是 TerminalReporter，位于 packages/metro/src/lib/TerminalReporter.js。\n\n### watchFolders\n\n定义源文件的全集，打包构建工作将在这个全集中执行。\n\n如果一个文件在构建时发现它不在 watchFolders 中，将会构建失败（sha-1 计算错误）。\n\n## ResolverConfigT\n\nResolverConfigT 包含以下字段：\n\n| 字段                      | 说明               |\n| ------------------------- | ------------------ |\n| assetExts                 | 资源文件扩展名     |\n| blacklistRE               | 模块路径的忽略规则 |\n| extraNodeModules          |                    |\n| hasteImplModulePath       |                    |\n| platforms                 | 所解析的平台       |\n| providesModuleNodeModules |                    |\n| resolverMainFields        |                    |\n| resolveRequest            |                    |\n| sourceExts                | 代码文件后缀       |\n| useWatchman               | 是否启用 Watchman  |\n\n### assetExts\n\n资源文件扩展名，默认值为：\n\n```\nexports.assetExts = [\n  // Image formats\n  'bmp',\t'gif',\t'jpg',\t'jpeg',\n  'png',\t'psd',\t'svg',\t'webp',\n  // Video formats\n  'm4v',\t'mov',\t'mp4',\n  'mpeg',\t'mpg',\t'webm',\n  // Audio formats\n  'aac',\t'aiff',\t'caf',\t\n  'm4a',\t'mp3',\t'wav',\n  // Document formats\n  'html',\t'pdf',\n  // Font formats\n  'otf',\t'ttf',\n];\n```\n\n如果一个文件的后缀在 assetExts 中，就被认为是一个资源文件。\n\n### blacklistRE\n\n模块路径的忽略规则，定义在 node_modules/metro-config/src/defaults/blacklist.js 中。\n\n默认规则执行后的值为：\n\n```\n/\\\\(node_modules\\\\[\\\\\\\\/\\\\\\\\\\\\\\\\\\\\]react\\\\[\\\\\\\\/\\\\\\\\\\\\\\\\\\\\]dist\\\\[\\\\\\\\/\\\\\\\\\\\\\\\\\\\\]\\\\.\\\\*\\\\|website\\\\\\\\/node_modules\\\\\\\\/\\\\.\\\\*\\\\|heapCapture\\\\\\\\/bundle\\\\\\\\\\\\.js\\\\|\\\\.\\\\*\\\\\\\\/__tests__\\\\\\\\/\\\\.\\\\*\\\\)\\\\$/\n```\n\n### hasteImplModulePath\n\n默认值是 undefined。（在 react-native 的 local-cli/core/index.js 中，它指向路径 ../../jest/hasteImpl，即 react-native 的 jest/hasteImpl.js）。\n\n### platforms\n\n所解析的平台。默认值：\n\n```js\nexports.platforms = ['ios', 'android', 'windows', 'web'];\n```\n\n### providesModuleNodeModules\n\n默认值：\n\n```js\nexports.providesModuleNodeModules = ['react-native', 'react-native-windows'];\n```\n\n### resolverMainFields\n\n默认值：\n\n```js\nresolverMainFields: ['browser', 'main']\n```\n\n### resolveRequest\n\n默认值：null。\n\n### sourceExts\n\n代码文件后缀。默认值：\n\n```js\nexports.sourceExts = ['js', 'json', 'ts', 'tsx'];\n```\n\n## ServerConfigT\n\nServerConfigT 包含以下字段：\n\n| 字段              | 说明                               |\n| ----------------- | ---------------------------------- |\n| enableVisualizer  | 是否启用可视化器（？还有这功能？） |\n| enhanceMiddleware | 应用中间件（？还有这功能？）       |\n| useGlobalHotkey   | （？）                             |\n| port              | 端口号                             |\n\n## SerializerConfigT\n\nSerializerConfigT 包含以下字段：\n\n| 字段                          | 说明                     |\n| ----------------------------- | ------------------------ |\n| createModuleIdFactory         | 创建 module id 的工厂    |\n| experimentalSerializerHook    | ?                        |\n| getModulesRunBeforeMainModule | 指定在主模块前运行的模块 |\n| getPolyfills                  | 获取 Polyfills           |\n| getRunModuleStatement         |                          |\n| polyfillModuleNames           |                          |\n| postProcessBundleSourcemap    |                          |\n| processModuleFilter           |                          |\n\n### createModuleIdFactory\n\n创建 module id 的工厂，方法签名：\n\n```js\n() => (path: string) => number\n```\n\n### experimentalSerializerHook\n\n不知道干什么的，方法签名：\n\n```js\n(graph: Graph<>, delta: DeltaResult<>) => mixed\n```\n\n### getModulesRunBeforeMainModule\n\n指定在主模块前运行的模块，方法签名：\n\n```\n (entryFilePath: string) => Array<string>\n```\n\n默认值：\n\n```js\ngetModulesRunBeforeMainModule: () => []\n```\n\n### getPolyfills\n\n获取 Polyfills，方法签名：\n\n```\ngetPolyfills: ({platform: ?string}) => $ReadOnlyArray<string>\n```\n\n默认值：\n\n```js\n() => []\n```\n\n### getRunModuleStatement\n\n方法签名：\n\n```\n(number | string) => string\n```\n\n默认值：\n\n```js\ngetRunModuleStatement: moduleId => `__r(${JSON.stringify(moduleId)});`\n```\n\n### polyfillModuleNames\n\n默认值：`[]`。\n\n### postProcessBundleSourcemap\n\n默认值：\n\n```js\npostProcessBundleSourcemap: ({code, map, outFileName}) => ({code, map})\n```\n\n### processModuleFilter\n\n默认值：\n\n```js\nprocessModuleFilter: module => true,\n```\n\n## TransformerConfigT\n\nSerializerConfigT 包含以下字段：\n\n| 字段                   | 说明           |\n| ---------------------- | -------------- |\n| assetPlugins           | 资源插件       |\n| assetRegistryPath      |                |\n| asyncRequireModulePath |                |\n| babelTransformerPath   |                |\n| dynamicDepsInPackages  |                |\n| enableBabelRCLookup    |                |\n| enableBabelRuntime     |                |\n| minifierConfig         | 压缩混淆器设置 |\n| minifierPath           | 压缩混淆器路径 |\n| optimizationSizeLimit  |                |\n| getTransformOptions    |                |\n| postMinifyProcess      |                |\n| transformVariants      |                |\n| workerPath             |                |\n\n### assetPlugins\n\n资源插件。默认值：`[]`。\n\n### assetRegistryPath\n\n默认值：'missing-asset-registry-path'\n\n### asyncRequireModulePath\n\n默认值：'metro/src/lib/bundle-modules/asyncRequire'\n\n### babelTransformerPath\n\n默认值：'metro/src/defaultTransformer'\n\n### dynamicDepsInPackages\n\n默认值：'throwAtRuntime'\n\n### enableBabelRCLookup\n\n默认值：true。\n\n### enableBabelRuntime\n\n默认值：true。\n\n### minifierConfig\n\n默认值：\n\n```js\nminifierConfig: {\n    mangle: {\n        toplevel: false,\n    },\n    output: {\n        ascii_only: true,\n        quote_style: 3,\n        wrap_iife: true,\n    },\n    sourceMap: {\n        includeSources: false,\n    },\n    toplevel: false,\n    compress: {\n        // reduce_funcs inlines single-use functions, which cause perf regressions.\n        reduce_funcs: false,\n    },\n}\n```\n\n### minifierPath\n\n默认值：'metro-minify-uglify'\n\n### optimizationSizeLimit\n\n默认值：150 * 1024, // 150 KiB.\n\n### getTransformOptions\n\n默认值：\n\n```\ngetTransformOptions: async () => ({\n    transform: {experimentalImportSupport: false, inlineRequires: false},\n    preloadedModules: false,\n    ramGroups: [],\n})\n```\n\n### postMinifyProcess\n\n默认值：\n\n```\npostMinifyProcess: x => x\n```\n\n### transformVariants\n\n默认值：\n\n```\ntransformVariants: {default: {}}\n```\n\n### workerPath\n\n默认值：\n\n```\nworkerPath: 'metro/src/DeltaBundler/Worker'\n```\n\n## 总结\n\n以上就是 ConfigT 的所有设置项，可以看出数量非常多，这也说明了 Metro Server 的工程是非常丰富的。\n\n其中很多选项我还不知道他们的含义是什么，后续随着认识的加深，我会回来再继续补全。"},"path":"post/MetroConfigTmd"}
