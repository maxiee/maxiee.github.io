{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Native 代码阅读（九）：APP 启动时的 Bridge 通信记录","desc":"在前面的文章中，我们知道 Native 侧与 JavaScript 是通过 Bridge 进行通信的。那么，在 JS APP 启动时到底进行了哪些通信呢？我把它记录在了本文中。","type":"md","link":"ReactNativeCode9md","create":"2019-03-08","filename":"ReactNativeCode9.md"},"content":"## 前言\n\n在前面的文章中，我们知道 Native 侧与 JavaScript 是通过 Bridge 进行通信的。那么，在 JS APP 启动时到底进行了哪些通信呢？我把它记录在了本文中。\n\n如何监听 Bridge 通信呢？\n\n其实很简单，React Native 预留了一个方法，通过 JavaScript 侧 MessageQueue 的 spy 方法，会自动把通信记录打印在 Console 中。\n\n具体可以参考我之前的两篇翻译文章：\n\n- [React Native —— 如何检查 Bridge 都传了哪些东西（翻译）](https://maxiee.github.io/post/ReactNativeCheckBridge.md/)\n- [React Native Internals（翻译）](https://maxiee.github.io/post/ReactNativeInternals.md/)\n\n两行代码就能搞定，在 index.js 中添加：\n\n```js\nimport MessageQueue from 'react-native/Libraries/BatchedBridge/MessageQueue'\nMessageQueue.spy(true)\n```\n\n我们的 React Native APP 启动后的界面如下：\n\n![](image/ReactNativeCode901.png)\n\n[MaxieeRNLab](https://github.com/maxiee/MaxieeRNLab) 是我目前正在开发的一个开源项目。\n\n未来我会将学到的 React Native 开发经验都沉淀在这个项目当中，并打造良好的学习体验。欢迎 Star 支持！\n\n## AppRegistry.runApplication\n\n下面我们来逐行地分析启动记录。\n\n```\nN->JS : AppRegistry.runApplication([\"MaxieeRNLab\",{\"rootTag\":1}])\n```\n\n这是第一条记录：\n\n- N->JS 表示它是从 Native 侧调用 JavaScript 侧的\n\n还记得我们在开发 React Native 应用时，首先都要调用：\n\n```js\nAppRegistry.registerComponent(\"MaxieeRNLab\", () => App);\n```\n\n之前写这句话的时候，还不知道哪里会调用，现在终于建立起联系了！\n\n之后 Console 会再打一条：\n\n```\nRunning application \"MaxieeRNLab\" with appParams: {\"rootTag\":1}. __DEV__ === true, development-level warning are ON, performance optimizations are OFF\n```\n\n说明我们的程序启动了。\n\n我们在深入一步问一个问题，Native 这一侧是哪里调用呢？\n\n我们按照调用栈顺序，梳理出如下调用：\n\n- com.facebook.react.ReactRootView#runApplication\n    - com.facebook.react.ReactInstanceManager#attachRootViewToInstance\n        - com.facebook.react.ReactInstanceManager#attachRootView\n            - com.facebook.react.ReactRootView#attachToReactInstanceManager\n                - com.facebook.react.ReactRootView#onMeasure\n                - com.facebook.react.ReactRootView#startReactApplication\n                    - com.facebook.react.ReactActivityDelegate#loadApp\n                        - com.facebook.react.ReactActivity#loadApp\n                        - com.facebook.react.ReactActivityDelegate#onCreate\n        - com.facebook.react.ReactInstanceManager#setupReactContext\n            - com.facebook.react.ReactInstanceManager#runCreateReactContextOnNewThread\n                - ……\n\n在之前的文章中，我们分析过 React Native 框架的启动过程，结合上面的调用栈，两个是一正一反的关系，能够帮助我们形成更深的理解。\n\nRunning application \"MaxieeRNLab\"…… 这个是在哪里执行的呢？\n\n是在 Libraries/ReactNative/AppRegistry.js 的 runApplication 方法中进行的。这里我们不展开，放到后面地文章中再分析。\n\n## 创建视图\n\n接下来我们接着看日志，再下面一条日志就开始创建布局了：\n\n```\nS->N : UIManager.createView([3,\"RCTRawText\",1,{\"text\":\"React Native UI\"}])\nJS->N : UIManager.createView([5,\"RCTText\",1,{\"fontFamily\":\"sans-serif\",\"fontSize\":28,\"fontWeight\":\"bold\",\"accessible\":true,\"allowFontScaling\":true,\"ellipsizeMode\":\"tail\"}])\nJS->N : UIManager.setChildren([5,[3]])\nJS->N : UIManager.createView([7,\"RCTRawText\",1,{\"text\":\"React Native Elements Demo\"}])\nJS->N : UIManager.createView([9,\"RCTText\",1,{\"color\":-14644772,\"fontSize\":16,\"textAlign\":\"center\",\"paddingTop\":2,\"paddingBottom\":1,\"fontFamily\":\"sans-serif-medium\",\"accessible\":true,\"allowFontScaling\":true,\"ellipsizeMode\":\"tail\"}])\nJS->N : UIManager.setChildren([9,[7]])\n……\n```\n\n对照文章开头的 UI 界面来看：\n\n- 我们发现 `<Text/>` 组件实际上创建了两个 View：RCTRawText 和 RCTText\n- 之后通过 setChildren 对两者建立嵌套关系\n\n跳过几行重复的，我们来到下面记录：\n\n```\nJS->N : UIManager.createView([37,\"RCTView\",1,{\"flex\":1,\"margin\":8}])\nJS->N : UIManager.setChildren([37,[5,17,23,35]])\n```\n\n之前创建的编号为 5 的 RCTText（React Native UI），被放到了编号为 37 的 RCTView 当中。\n\n再跳过一些重复记录，我们来到：\n\n```\nJS->N : UIManager.createView([77,\"RCTView\",1,{\"flex\":1,\"pointerEvents\":\"box-none\"}])\nJS->N : UIManager.setChildren([77,[75]])\nJS->N : UIManager.setChildren([1,[77]])\n```\n\n其中：\n\n- 编号为 1 View 是应用的根视图，我们把编号为 77 的 View 添加到了根视图当中\n\n上面只是对视图的添加，由于界面中有两个按钮，因此接下来需要对按钮进行特别操作：\n\n```\nJS->N : NativeAnimatedModule.createAnimatedNode([1,{\"type\":\"value\",\"value\":0,\"offset\":0}])\nJS->N : NativeAnimatedModule.createAnimatedNode([2,{\"type\":\"value\",\"value\":0,\"offset\":0}])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationX\"],\"animatedValueTag\":1}])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationY\"],\"animatedValueTag\":2}])\nJS->N : RNGestureHandlerModule.createGestureHandler([\"PanGestureHandler\",1,{\"enabled\":false,\"hitSlop\":{\"right\":50},\"activeOffsetXEnd\":5,\"failOffsetYStart\":-20,\"failOffsetYEnd\":20}])\nJS->N : RNGestureHandlerModule.attachGestureHandler([1,69])\nJ\n```\n\n## APP 状态就绪\n\n接下来是：\n\n```\nN->JS : RCTDeviceEventEmitter.emit([\"appStateDidChange\",{\"app_state\":\"active\"}])\nN->JS : <callback for AppState.getCurrentAppState>([{\"app_state\":\"active\"}])\n```\n\n这是从 Native 调用到 JavaScript，用于通知 APP 状态就绪。\n\n我们先来看 Native 侧的调用位置：\n\n- com.facebook.react.modules.appstate.AppStateModule#sendAppStateChangeEvent\n    - com.facebook.react.modules.appstate.AppStateModule#onHostResume\n    - com.facebook.react.modules.appstate.AppStateModule#onHostPause\n\n可以看出，这是跟 Activity 生命周期走的。\n\n也就是当 Activity 显示出来的时候，发出了 state active 消息。\n\n其中，RCTDeviceEventEmitter 是 Native 向 JavaScript 发送消息的发送器。\n\n## 建立 WebSocket 链接\n\n由于我们运行的是 DEV 模式，因此会建立 WebSocket 链接：\n\n```\nJS->N : WebSocketModule.connect([\"ws://localhost:8097\",null,{\"headers\":{}},1])\n```\n\n如果我们进行浏览器调试，就会走这条 WebSocket。\n\n它定义了一个定时器，如果没有连接上，会反复 connect。\n\n## 小结\n\n至此我们就完成了启动流程的 Bridge 记录分析。\n\n## 附：Bridge 完整记录\n\n最后，我给出启动时的完整记录：\n\n```\nN->JS : AppRegistry.runApplication([\"MaxieeRNLab\",{\"rootTag\":1}])\nRunning application \"MaxieeRNLab\" with appParams: {\"rootTag\":1}. __DEV__ === true, development-level warning are ON, performance optimizations are OFF\nJS->N : UIManager.createView([3,\"RCTRawText\",1,{\"text\":\"React Native UI\"}])\nJS->N : UIManager.createView([5,\"RCTText\",1,{\"fontFamily\":\"sans-serif\",\"fontSize\":28,\"fontWeight\":\"bold\",\"accessible\":true,\"allowFontScaling\":true,\"ellipsizeMode\":\"tail\"}])\nJS->N : UIManager.setChildren([5,[3]])\nJS->N : UIManager.createView([7,\"RCTRawText\",1,{\"text\":\"React Native Elements Demo\"}])\nJS->N : UIManager.createView([9,\"RCTText\",1,{\"color\":-14644772,\"fontSize\":16,\"textAlign\":\"center\",\"paddingTop\":2,\"paddingBottom\":1,\"fontFamily\":\"sans-serif-medium\",\"accessible\":true,\"allowFontScaling\":true,\"ellipsizeMode\":\"tail\"}])\nJS->N : UIManager.setChildren([9,[7]])\nJS->N : UIManager.createView([13,\"RCTView\",1,{\"flexDirection\":\"row\",\"justifyContent\":\"center\",\"alignItems\":\"center\",\"borderRadius\":3,\"backgroundColor\":0,\"padding\":8,\"borderWidth\":0.36363636363636365,\"borderColor\":-14644772,\"nativeBackgroundAndroid\":{\"type\":\"RippleAndroid\",\"borderless\":false},\"accessible\":true}])\nJS->N : UIManager.setChildren([13,[9]])\nJS->N : UIManager.createView([15,\"RCTView\",1,{\"borderRadius\":3}])\nJS->N : UIManager.setChildren([15,[13]])\nJS->N : UIManager.createView([17,\"RCTView\",1,{\"margin\":10,\"flexDirection\":\"column\",\"alignItems\":\"center\"}])\nJS->N : UIManager.setChildren([17,[15]])\nJS->N : UIManager.createView([19,\"RCTRawText\",1,{\"text\":\"React Native Architecture\"}])\nJS->N : UIManager.createView([23,\"RCTText\",1,{\"fontFamily\":\"sans-serif\",\"fontSize\":28,\"fontWeight\":\"bold\",\"accessible\":true,\"allowFontScaling\":true,\"ellipsizeMode\":\"tail\"}])\nJS->N : UIManager.setChildren([23,[19]])\nJS->N : UIManager.createView([25,\"RCTRawText\",1,{\"text\":\"React Navigation Demo\"}])\nJS->N : UIManager.createView([27,\"RCTText\",1,{\"color\":-14644772,\"fontSize\":16,\"textAlign\":\"center\",\"paddingTop\":2,\"paddingBottom\":1,\"fontFamily\":\"sans-serif-medium\",\"accessible\":true,\"allowFontScaling\":true,\"ellipsizeMode\":\"tail\"}])\nJS->N : UIManager.setChildren([27,[25]])\nJS->N : UIManager.createView([29,\"RCTView\",1,{\"flexDirection\":\"row\",\"justifyContent\":\"center\",\"alignItems\":\"center\",\"borderRadius\":3,\"backgroundColor\":0,\"padding\":8,\"borderWidth\":0.36363636363636365,\"borderColor\":-14644772,\"nativeBackgroundAndroid\":{\"type\":\"RippleAndroid\",\"borderless\":false},\"accessible\":true}])\nJS->N : UIManager.setChildren([29,[27]])\nJS->N : UIManager.createView([33,\"RCTView\",1,{\"borderRadius\":3}])\nJS->N : UIManager.setChildren([33,[29]])\nJS->N : UIManager.createView([35,\"RCTView\",1,{\"margin\":10,\"flexDirection\":\"column\",\"alignItems\":\"center\"}])\nJS->N : UIManager.setChildren([35,[33]])\nJS->N : UIManager.createView([37,\"RCTView\",1,{\"flex\":1,\"margin\":8}])\nJS->N : UIManager.setChildren([37,[5,17,23,35]])\nJS->N : UIManager.createView([39,\"RCTView\",1,{\"flex\":1}])\nJS->N : UIManager.setChildren([39,[37]])\nJS->N : UIManager.createView([43,\"RCTRawText\",1,{\"text\":\"MaxieeRNLab\"}])\nJS->N : UIManager.createView([45,\"RCTText\",1,{\"numberOfLines\":1,\"allowFontScaling\":true,\"accessibilityTraits\":\"header\",\"fontSize\":20,\"fontWeight\":\"500\",\"color\":-436207616,\"marginHorizontal\":16,\"textAlign\":\"left\",\"accessible\":true,\"ellipsizeMode\":\"tail\"}])\nJS->N : UIManager.setChildren([45,[43]])\nJS->N : UIManager.createView([47,\"RCTView\",1,{\"pointerEvents\":\"box-none\",\"backgroundColor\":0,\"bottom\":0,\"top\":0,\"position\":\"absolute\",\"alignItems\":\"center\",\"flexDirection\":\"row\",\"justifyContent\":\"flex-start\",\"left\":0,\"right\":0,\"opacity\":1}])\nJS->N : UIManager.setChildren([47,[45]])\nJS->N : UIManager.createView([49,\"RCTView\",1,{\"position\":\"absolute\",\"left\":0,\"right\":0,\"top\":0,\"bottom\":0,\"flexDirection\":\"row\"}])\nJS->N : UIManager.setChildren([49,[47]])\nJS->N : UIManager.createView([53,\"RCTView\",1,{\"flex\":1}])\nJS->N : UIManager.setChildren([53,[49]])\nJS->N : UIManager.createView([55,\"RCTView\",1,{\"pointerEvents\":\"box-none\",\"onLayout\":true,\"backgroundColor\":-1,\"elevation\":0,\"height\":56,\"shadowOpacity\":0,\"borderBottomColor\":-1118482,\"borderBottomWidth\":1,\"paddingTop\":0,\"paddingBottom\":0,\"paddingLeft\":0,\"paddingRight\":0}])\nJS->N : UIManager.setChildren([55,[53]])\nJS->N : UIManager.createView([57,\"RCTView\",1,null])\nJS->N : UIManager.setChildren([57,[55]])\nJS->N : UIManager.createView([59,\"RCTView\",1,{\"flex\":1,\"flexDirection\":\"column-reverse\",\"overflow\":\"hidden\"}])\nJS->N : UIManager.setChildren([59,[39,57]])\nJS->N : UIManager.createView([63,\"RCTView\",1,{\"importantForAccessibility\":\"yes\",\"flex\":1,\"backgroundColor\":-1}])\nJS->N : UIManager.setChildren([63,[59]])\nJS->N : UIManager.createView([65,\"RCTView\",1,{\"pointerEvents\":\"auto\",\"position\":\"absolute\",\"left\":0,\"right\":0,\"top\":0,\"bottom\":0,\"opacity\":1,\"transform\":[{\"translateX\":0},{\"translateY\":0}]}])\nJS->N : UIManager.setChildren([65,[63]])\nJS->N : UIManager.createView([67,\"RCTView\",1,{\"flex\":1}])\nJS->N : UIManager.setChildren([67,[65]])\nJS->N : UIManager.createView([69,\"RCTView\",1,{\"collapsable\":false,\"flex\":1,\"flexDirection\":\"column-reverse\",\"overflow\":\"hidden\"}])\nJS->N : UIManager.setChildren([69,[67]])\nJS->N : UIManager.createView([73,\"RCTView\",1,{\"onLayout\":true,\"flex\":1}])\nJS->N : UIManager.setChildren([73,[69]])\nJS->N : UIManager.createView([75,\"RCTView\",1,{\"collapsable\":true,\"pointerEvents\":\"box-none\",\"flex\":1}])\nJS->N : UIManager.setChildren([75,[73]])\nJS->N : UIManager.createView([77,\"RCTView\",1,{\"flex\":1,\"pointerEvents\":\"box-none\"}])\nJS->N : UIManager.setChildren([77,[75]])\nJS->N : UIManager.setChildren([1,[77]])\nJS->N : NativeAnimatedModule.createAnimatedNode([1,{\"type\":\"value\",\"value\":0,\"offset\":0}])\nJS->N : NativeAnimatedModule.createAnimatedNode([2,{\"type\":\"value\",\"value\":0,\"offset\":0}])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationX\"],\"animatedValueTag\":1}])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationY\"],\"animatedValueTag\":2}])\nJS->N : RNGestureHandlerModule.createGestureHandler([\"PanGestureHandler\",1,{\"enabled\":false,\"hitSlop\":{\"right\":50},\"activeOffsetXEnd\":5,\"failOffsetYStart\":-20,\"failOffsetYEnd\":20}])\nJS->N : RNGestureHandlerModule.attachGestureHandler([1,69])\nJS->N : IntentAndroid.getInitialURL([134,135])\nJS->N : UIManager.measureInWindow([55,137])\nN->JS : RCTDeviceEventEmitter.emit([\"appStateDidChange\",{\"app_state\":\"active\"}])\nN->JS : <callback for AppState.getCurrentAppState>([{\"app_state\":\"active\"}])\nN->JS : RCTDeviceEventEmitter.emit([\"websocketFailed\",{\"message\":\"Failed to connect to localhost/127.0.0.1:8097\",\"id\":0}])\nJS->N : Timing.createTimer([2,2000,1551945257451,false])\nN->JS : <callback for IntentAndroid.getInitialURL>([null])\nN->JS : <callback for UIManager.measureInWindow>([0,0,0,0])\nN->JS : RCTDeviceEventEmitter.emit([\"didUpdateDimensions\",{\"screenPhysicalPixels\":{\"densityDpi\":440,\"fontScale\":1,\"scale\":2.75,\"height\":1920,\"width\":1080},\"windowPhysicalPixels\":{\"densityDpi\":440,\"fontScale\":1,\"scale\":2.75,\"height\":1812,\"width\":1080}}])\nJS->N : NativeAnimatedModule.removeAnimatedEventFromView([69,\"onGestureHandlerEvent\",1])\nJS->N : NativeAnimatedModule.removeAnimatedEventFromView([69,\"onGestureHandlerEvent\",2])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationX\"],\"animatedValueTag\":1}])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationY\"],\"animatedValueTag\":2}])\nN->JS : RCTEventEmitter.receiveEvent([55,\"topLayout\",{\"target\":55,\"layout\":{\"height\":56,\"width\":392.7272644042969,\"y\":0,\"x\":0}}])\nN->JS : RCTEventEmitter.receiveEvent([73,\"topLayout\",{\"target\":73,\"layout\":{\"height\":634.9091186523438,\"width\":392.7272644042969,\"y\":0,\"x\":0}}])\nJS->N : UIManager.updateView([65,\"RCTView\",{\"transform\":[{\"translateY\":0}]}])\nJS->N : NativeAnimatedModule.removeAnimatedEventFromView([69,\"onGestureHandlerEvent\",1])\nJS->N : NativeAnimatedModule.removeAnimatedEventFromView([69,\"onGestureHandlerEvent\",2])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationX\"],\"animatedValueTag\":1}])\nJS->N : NativeAnimatedModule.addAnimatedEventToView([69,\"onGestureHandlerEvent\",{\"nativeEventPath\":[\"translationY\"],\"animatedValueTag\":2}])\nJS->N : RNGestureHandlerModule.updateGestureHandler([1,{\"enabled\":false,\"hitSlop\":{\"right\":-342.7272644042969},\"activeOffsetXEnd\":5,\"failOffsetYStart\":-20,\"failOffsetYEnd\":20}])\nN->JS : JSTimers.callTimers([[2]])\nJS->N : WebSocketModule.connect([\"ws://localhost:8097\",null,{\"headers\":{}},1])\nN->JS : RCTDeviceEventEmitter.emit([\"websocketFailed\",{\"message\":\"Failed to connect to localhost/127.0.0.1:8097\",\"id\":1}])\nJS->N : Timing.createTimer([6,2000,1551945259545,false])\nN->JS : JSTimers.callTimers([[6]])\nJS->N : WebSocketModule.connect([\"ws://localhost:8097\",null,{\"headers\":{}},2])\nN->JS : RCTDeviceEventEmitter.emit([\"websocketFailed\",{\"message\":\"Failed to connect to localhost/127.0.0.1:8097\",\"id\":2}])\nJS->N : Timing.createTimer([7,2000,1551945261627,false])\nN->JS : JSTimers.callTimers([[7]])\nJS->N : WebSocketModule.connect([\"ws://localhost:8097\",null,{\"headers\":{}},3])\nN->JS : RCTDeviceEventEmitter.emit([\"websocketFailed\",{\"message\":\"Failed to connect to localhost/127.0.0.1:8097\",\"id\":3}])\nJS->N : Timing.createTimer([8,2000,1551945263663,false])\n```\n"},"path":"post/ReactNativeCode9md"}
