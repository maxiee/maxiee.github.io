{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"Android DataBinding","desc":"Data binding 已经不是什么新技术了. 这是一个大趋势, 能让我们少写不少代码, 同时代码更加美观.","type":"md","link":"AndroidDevDataBindingmd","create":"2018-03-01","filename":"AndroidDevDataBinding.md"},"content":"## 前言\n\nData binding 已经不是什么新技术了. 这是一个大趋势, 能让我们少写不少代码, 同时代码更加美观.\n\n## 配置\n\nData Binding 默认不启用, 需要配置:\n\n``` gradle\nandroid {\n    ....\n    dataBinding {\n        enabled = true\n    }\n}\n```\n\n## Data Binding Compiler V2\n\nAndroid Gradle Plugin 3.1.0 Canary 6 添加了一个可选的新编译器, 叫 Data Binding Compiler V2.\n\n启用方式, 在 gradle.properties 中添加一行:\n\n```\nandroid.databinding.enableV2=true\n```\n\n## 整体\n\n在深入细节之前, 有必要从整体上来看下, Data Binding 是怎么回事:\n\n![](image/databinding_1.png)\n\n图中, View Container 是视图容器, 可以是 Activity 或者 ViewGroup, 可以理解为屏幕上的一个部分.\n\n我们要做的是在这个容器中填充一个视图, 同时为这个视图绑定数据.\n\n这种事情在开发中在平常不过了, 使用传统的方法, 需要以下步骤:\n\n1. inflate layout\n2. findViewById\n3. 向视图中绑定数据\n\n这当中涉及到大量的胶水代码. 而使用 Data Binding 就能够省掉这些胶水代码.\n\n回到图中, Android 的 Data Binding 是在**布局**中设定数据 Model 和事件响应 Handler 的.\n\nModel 是一个 POJO, 是需要被绑定到视图上面的数据.\n\nHandler 是一个我们定义的类, 它提供一系列方法, 布局中就能直接调用这些方法.\n\nDataBindingUtil 处于中心位置, 将 MVVM 的各方绑定到一起."},"path":"post/AndroidDevDataBindingmd"}
