{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"螺丝钉：企业组织中的个体","desc":"在这两年半的时间里，我都是在互联网公司的纯业务部门，负责软件开发。大型互联网公司拥有细致的专业划分、职责划分，细致到每个小组、每个人负责一摊事，并有明确的绩效考核。在这种框架下，每个人如同巨大机器中的一颗螺丝钉。我根据自身经验，总结了这种方式的利弊。","type":"md","link":"PeopleAndCompanymd","create":"2019-01-11","filename":"PeopleAndCompany.md"},"content":"## 前言\n\n在这两年半的时间里，我都是在互联网公司的纯业务部门，负责软件开发。大型互联网公司拥有细致的专业划分、职责划分，细致到每个小组、每个人负责一摊事，并有明确的绩效考核。\n\n在这种框架下，每个人如同巨大机器中的一颗螺丝钉。我根据自身经验，总结了这种方式的利弊。\n\n## 人无穷多，力量无限大吗？\n\n所谓人多力量大，但是当人无穷多的时候，力量会无限大吗？\n\n当然不可能。\n\n人是有感情、有心理活动的，当人多起来之后，管理难度、沟通难度都会加大，大到一定程度后，管理与沟通都会遇到瓶颈。\n\n我们知道，计算机代码是没有感情的，让它做什么他就做什么，那么代码无穷多，程序的力量会无限大吗？\n\n答案还是不可能，在 Unix 思想中，一个程序干好一件事情就行，要保持 KISS。原因是如果一个程序要求的功能过多，它的架构设计会变得很困难，并且难以维护，当复杂度积累到一定规模后，它变得不可维护，同样会遇到瓶颈。\n\n因此可以看出，问题的关键在于复杂度，复杂度上去了，效能就会受到影响。\n\n## 组织架构就是复杂度\n\n### 把大象放进冰箱需要几步？\n\n我们引用一个老掉牙的段子：把大象放进冰箱需要几步？\n\n答案我们都知道，三步：\n\n1.  把冰箱门打开\n2.  把大象放进去\n3.  把冰箱门关上\n\n假设这就是标准答案，通过这三步真的能够把大象放进冰箱里。\n\n我们从组织架构的角度来看待这个问题。假设有三个部门分别负责其中的一个步骤：\n\n-   开门组\n-   大象搬运组\n-   关门组\n\n现在他们接到了公司的任务，需要把一头大象放到冰箱里去，我们设想将发生的事情。\n\n### 时间复杂度\n\n首先三个组协调了半天，终于约到一个大家都有空的时间，一起坐下来碰头：\n\n-   项目 KickOff：目标、使命、规划\n    -   目标\n        -   短期目标：完成公司任务\n        -   长期目标：建立一套高效将大象装进冰箱的业界规范，在业界推广\n    -   使命：让世界上不再有难装的大象\n    -   规划：\n        -   初期：方案设计与验证\n        -   中期：项目实施\n        -   后期：推广\n\n项目计划列出来后，发给 Leader 审阅。Leader 何许人也，想必大家都知道，必定是高瞻远瞩者。\n\n他看到这个计划后直摇头：\n\n-   什么？只有大象？\n-   你们还是思路太过于局限，眼界太低\n-   只装大象怎么能体现出你的领先程度呢？\n-   难道没有发现，装任何东西，它背后是一个商业模式吗？\n-   要从商业模式的角度来考虑问题\n-   不能只想着装大象，你今天装大象，你一辈子装大象\n\n众人一听，我去，还是老大水平高。赶紧又约了一个大家都有空的时间，一起坐下来修改 PPT：\n\n-   目标\n    -   短期目标：完成公司任务\n    -   中期目标：建立一套高效将大象装进冰箱的业界规范，在业界推广\n    -   长期目标：建立一套装X的商业模式，给啥装啥\n-   使命：想装就装，欧耶\n-   规划：\n    -   初期：方案设计与验证\n        -   **在设计初期不能只想着装大象，要把装火箭、装蚂蚁都考虑进入，建立通用框架**\n    -   中期：项目实施，装大象，同时试验装火箭、装蚂蚁\n    -   后期：推广\n\n在大家的加班与通宵下，计划终于出出来了，通过了评审。不得不说的是，大象晾在一旁都快凉了一半了（大象：？？？）。\n\n后面的故事我就不再延展了，否则一万字也写不完……这也能体现出，分工协作后，花费的时间大大提高了。原来只需要 3 个步骤，通过分工后扩展出许许多多个步骤，以及协调所需付出的时间成本。\n\n究其原因，可以总结为：\n\n-   人是贪婪的，人多了之后，期望成倍的增加\n-   KPI 导向导致人们脱离原始目标（详见下文）\n-   信息同步、协调把控，都需要付出大量时间、精力成本\n\n这也就是为什么公司里有时成功的项目，团队的人数并不多。有时候反而人少好办事。\n\n### 绩效复杂度\n\n把大象装进冰箱主需要 3 步，打开门、放进去、关上门。对于公司来说，装大象这件事情并不是公司的主营业务，要求并不高。只要能麻溜装进去，省下精力来放在重要的事情上。\n\n就是这么简单一件事情，在从上到下一步一步传达的过程当中，由于绩效的存在，会逐渐发生扭曲。\n\n原因也同样很简单，每个作为螺丝钉的人，他们来到公司是希望自身发展的（升职、加薪），不论哪一级，在做事时都希望能够展现出自己的才华，获得 Leader 的重视，承担更高层次的工作。\n\n这也与公司对员工的期许附和起来了，公司都是希望员工能够站在更高的角度上看待问题，而不只是无脑执行。\n\n但是问题是，对于一个螺丝钉来说（底层搬砖的、小 Leader），一个季度能接几个项目呢？可能装大象这件事情是他们一个 Q 中最大的事情了。因此必然是要在这件事情上大作文章，哪怕任务交待地很清楚：麻溜给我装进去，越快越好。\n\n**简单的事情被复杂化后，完成的效果会反过头来大打折扣。简单说就是三个字：想多了。这个情况屡见不鲜。**\n\n当公司规模变大之后，这是个无解的问题。不设定绩效不行，设定绩效也不行。\n\n我的感悟就是：\n\n-   一个集中分层的组织，当层次变多之后，传声筒开始失灵\n-   上层的想法与最终结果存在较大偏差\n\n咋解决呢？\n\n-   为什么问题一定都得解决呢？\n-   全球大公司都存在这个问题，组织管理学研究了好几十年，也没解决了这种问题\n-   存在这个问题的都属于甜蜜的烦恼，毕竟人家都是一定规模的大公司了\n\n## 有序与失控\n\n我们常说别的团队多么好，自己所在的团队多么乱。当然，别人家的饭都香。排除主观心理，假设两个规模差不多的团队，是什么决定了它们的好坏呢？\n\n### 什么是好\n\n我们往最理想了说，什么样是好呢？这是个开放性的问题，我想到的有：\n\n-   老板是一个务实的人，想法既超前，又切实际\n-   PM 能够写出详尽、 **自洽** 的产品文档\n-   PM 能够通过迭代逐步搭建起工程化的产品模型\n-   设计师形成产品的设计语言，形成复用度极高的组件库\n-   技术能够在保证质量的基础上，通过应用最佳实践，最大化提高开发效率\n-   有完善的内部系统，可以方便、开发、调试、运营、监控\n-   BI 团队能够建立完整的大盘、数据分析、应用机器学习技术进行探索\n-   ……\n\n梦之队啊……可能吗？如果有请告诉我…………\n\n### 什么是不好\n\n什么是不好就不必说了，大家心里都有数。\n\n### 足球与互联网团队\n\n最近我迷上了踢实况足球，我发现足球这种由 11 个队员协作完成的活动，与互联网团队的管理是可类比的。\n\n假设：\n\n-   老板是守门员\n-   策略、产品是后卫\n-   设计师是中卫\n-   研发是中锋\n-   测试是前锋\n\n一个业务项目的从零到一，就像是老板发出球，经过一级一级向前传递，最终打入对方球门的过程。\n\n在这个过程中：\n\n-   如果老板不靠谱，一脚把球提出边界，这次进攻直接宣告失败\n-   每组职能的队员如果做得好，球提给下一级会很舒服；如果做的不好，下一级会很难接，甚至接不住\n-   如果战略清晰、果断，会是很漂亮的一次进攻；如果策略前后反反复复，皮球踢过去又传回来，会提高丢球的风险\n-   比赛是有时间的，不能干耗着\n-   每个球员都有体力值，长期透支对身心都会带来不利影响，从而影响整体战略\n\n### 贪婪\n\n大多数时候组织失控源自战略贪婪，不断给自己加杠杆，想要把好处最大化，以致迷失自我。本本分分就不会有这么多问题，但是话说回来了，真正有点本事的，谁又能安于本分呢？\n\n## 总结\n\n有的人喜欢这种做螺丝钉的感觉，喜欢一步一步往上爬。有的人不喜欢这种做螺丝钉的感觉，向往自由自在。\n\n通过两年半的工作经历，我属于后者。我想大多数野心不大的人，可能都是倾向于后者的吧。但是生存的压力，又会将我们推向前者。\n\n生存嘛，一向如此。\n\n"},"path":"post/PeopleAndCompanymd"}
