{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Native 代码阅读（十）：Image 组件代码实现详解（Android）","desc":"Image 组件是 React Native 中的最常用组件之一，在本文中我们来看它在 Android 下的实现原理。","type":"md","link":"ReactNativeCode10md","create":"2019-03-11","filename":"ReactNativeCode10.md"},"content":"## 前言\n\nImage 组件是 React Native 中的最常用组件之一，在本文中我们来看它在 Android 下的实现原理。\n\n对于 Image 的使用，可以参考[官方文档](https://facebook.github.io/react-native/docs/images)。\n\n在 React Native 中使用方式很简单：\n\n```jsx\n<Image source={require('./my-icon.png')} />\n```\n\n这是如何实现的呢？它是如何映射到 Android 的 ImageView 呢？\n\n## image.android.js\n\nImage 组件定义在 image.android.js（Libraries/Image/Image.android.js）中。\n\n在这个文件中定义了：\n\n- Image 组件\n- getSize() 获取图片大小\n- prefetch() 预获取图片，存入磁盘缓存供后续使用\n- queryCache() 传入 URL 获取缓存状态（磁盘、内存、没有缓存）\n\n其中：\n\n- Image 组件对应于 Java 类 com.facebook.react.views.image.ReactImageManager\n- 几个方法对应于 Java 类 com/facebook/react/modules/image/ImageLoaderModule.java\n\n下面我们来详细看 Image 组件，它是一个函数式组件，一开始对 Props 进行一系列的校验。我们着重看它的 return 逻辑：\n\n```jsx\nreturn (\n  <TextAncestor.Consumer>\n    {hasTextAncestor =>\n      hasTextAncestor ? (\n        <TextInlineImageNativeComponent {...nativeProps} />\n      ) : (\n        <ImageViewNativeComponent {...nativeProps} />\n      )\n    }\n  </TextAncestor.Consumer>\n);\n```\n\n其中：包含一个判断逻辑，这里我们直接看 ImageViewNativeComponent。它位于：Libraries/Image/TextInlineImageNativeComponent.js：\n\n```js\n'use strict';\n\nconst requireNativeComponent = require('requireNativeComponent');\n\nconst ImageViewNativeComponent = requireNativeComponent('RCTImageView');\n\nmodule.exports = ImageViewNativeComponent;\n```\n\n## ReactImageManager\n\n上面代码中的 RCTImageView 对应于 Android Native 侧的 com.facebook.react.views.image.ReactImageManager。\n\nReactImageManager 有一个 createViewInstance，React Native 通过这个方法创建 ReactImageView 实例。\n\n同时 ReactImageManager 还有一系列 setter 方法：\n\n- setSource\n- setBlurRadius\n- setLoadingIndicatorSource\n- setBorderColor\n- setOverlayColor\n- setBorderWidth\n- setBorderRadius\n- setResizeMode\n- ……\n\n这些方法的参数都满足一定的模式：第一个参数为 ReactImageView 实例，第二个参数为属性的值。比如：\n\n```java\n// In JS this is Image.props.source\n@ReactProp(name = \"src\")\npublic void setSource(ReactImageView view, @Nullable ReadableArray sources) {\n  view.setSource(sources);\n}\n```\n\n每个 setter 方法都调用了 ReactImageView 的对应 setter 方法。\n\n需要注意的一点是，ReactImageView 每次被 set 属性后，不会立刻更新。它内部有一个 mIsDirty 状态，ReactImageView 会将这个状态先置为 true，之后统一根据是否 dirty 统一更新。\n\n## ReactImageView 图片的展示\n\n现在我们知道，React Native JS 侧的 Image 组件对应于 Android 的 ReactImageView。那么 ReactImageView 是如何把图片展示出来的呢？\n\n前面我们说到 ReactImageView 采用 dirty-update 的机制。update 方法为 com.facebook.react.views.image.ReactImageView#maybeUpdateView。\n\n它会首先判断是否 dirty，如果不 dirty 就直接退出方法：\n\n```java\nif (!mIsDirty) {\n  return;\n}\n```\n\n经过一系列的参数设置，最终创建出 Fresco 的图片加载请求：\n\n```java\nImageRequestBuilder imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(mImageSource.getUri())\n  .setPostprocessor(postprocessor)\n  .setResizeOptions(resizeOptions)\n  .setAutoRotateEnabled(true)\n  .setProgressiveRenderingEnabled(mProgressiveRenderingEnabled);\n\nImageRequest imageRequest = ReactNetworkImageRequest.fromBuilderWithHeaders(imageRequestBuilder, mHeaders);\n\n// This builder is reused\nmDraweeControllerBuilder.reset();\n\nmDraweeControllerBuilder\n  .setAutoPlayAnimations(true)\n  .setCallerContext(mCallerContext)\n  .setOldController(getController())\n  .setImageRequest(imageRequest);\n\nsetController(mDraweeControllerBuilder.build());\nmIsDirty = false;\n\nmDraweeControllerBuilder.reset();\n```\n\n其中：\n\n- ReactImageView 使用 Fresco 库进行图片加载\n- ReactImageView 的继承关系为\n    - ReactImageView\n        - GenericDraweeView\n            - DraweeView\n                - ImageView\n- 其中 Drawee 是 Fresco 库内部的一个[模块](https://github.com/facebook/fresco/tree/master/drawee)。\n\n这里我们不深入 Fresco 库内部的实现原理。在上面的代码中，我们知道了通过上述代码，调用 Fresco 库进行了图片加载。\n\n同时在 maybeUpdateView 方法中，还有很多对 Prop 细节的解析，比如圆角、背景、边框、Scale 方式等等的解析与配置。这些操作都是基于 Fresco 库进行的二次封装，感兴趣的同学可以再进一步看一下。\n\n## Source 属性的处理\n\n在我们的 JavaScript 代码中：\n\n```js\n<Image source={require('./my-icon.png')} />\n```\n\n指定了 source 属性，指定图片的位置。 source 属性是 Image 组件最终的属性，它是如何解析的呢？\n\n从 Image 使用文档中我们知道，React Native 的 Image 组件支持多种数据来源：JS 相对路径导入、Hybrid 资源引用、网络数据导入、Uri Data 都是可以的。\n\n这么多种类的来源如何进行处理呢？\n\n思考这个问题的思路如下：\n\n- 首先 source Prop 是 Image 的属性，因此它的过程是\n- 先调用 com.facebook.react.views.image.ReactImageManager#createViewInstance 创建实例\n- 再调用 com.facebook.react.views.image.ReactImageManager#setSource 设置属性\n\n因此就找到了 com.facebook.react.views.image.ReactImageManager#setSource 方法：\n\n```java\n// In JS this is Image.props.source\n@ReactProp(name = \"src\")\npublic void setSource(ReactImageView view, @Nullable ReadableArray sources) {\n  view.setSource(sources);\n}\n```\n\n之后来到 com.facebook.react.views.image.ReactImageView#setSource 方法，它的核心实现如下：\n\n首先获取 source Props：\n\n```java\nString uri = source.getString(\"uri\");\nImageSource imageSource = new ImageSource(getContext(), uri);\n```\n\n其中：\n\n- uri 就是我们指定的 source 值 `./my-icon.png`\n\n如何判定 source 是来源自网络、Hybrid 还是 Uri Data 呢？这就需要借助于 ImageSource 这个类，它专门用于解析来源。\n\nImageSource 解析来源的核心代码如下：\n\n```java\nprivate Uri computeUri(Context context) {\n  try {\n    Uri uri = Uri.parse(mSource);\n    // Verify scheme is set, so that relative uri (used by static resources) are not handled.\n    return uri.getScheme() == null ? computeLocalUri(context) : uri;\n  } catch (Exception e) {\n    return computeLocalUri(context);\n  }\n}\n\nprivate Uri computeLocalUri(Context context) {\n  isResource = true;\n  return ResourceDrawableIdHelper.getInstance().getResourceDrawableUri(context, mSource);\n}\n```\n\n其中：\n\n- 通过计算之后，返回的则是标准的 Android Uri\n- 这个 Uri 可以 Fresco 图片库识别进行资源加载\n\n## Image 的四个回调方法\n\nImage 组件有四个回调方法：\n\n- onLoadStart\n- onLoad\n- onLoadEnd\n- onError\n\n它们是从哪里发出，如何在 JS 层接到的呢？\n\n答案在 ReactImageManager 的 getExportedCustomDirectEventTypeConstants 方法中：\n\n```java\n@Override\npublic @Nullable Map getExportedCustomDirectEventTypeConstants() {\n  return MapBuilder.of(\n    ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_LOAD_START),\n      MapBuilder.of(\"registrationName\", \"onLoadStart\"),\n    ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_LOAD),\n      MapBuilder.of(\"registrationName\", \"onLoad\"),\n    ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_ERROR),\n      MapBuilder.of(\"registrationName\", \"onError\"),\n    ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_LOAD_END),\n      MapBuilder.of(\"registrationName\", \"onLoadEnd\"));\n}\n```\n\n这个方法中创建了一个 Map，对 ImageLoadEvent 枚举和名称进行了映射。\n\n这几个回调对应于 com.facebook.react.views.image.ImageLoadEvent 中的几个常量：\n\n```java\n// Currently ON_PROGRESS is not implemented, these can be added\n// easily once support exists in fresco.\npublic static final int ON_ERROR = 1;\npublic static final int ON_LOAD = 2;\npublic static final int ON_LOAD_END = 3;\npublic static final int ON_LOAD_START = 4;\npublic static final int ON_PROGRESS = 5;\n```\n\n这些事件是在哪里发出的呢？答案是在 ReactImageView 的 setShouldNotifyLoadEvents 方法中。\n\n这个方法的定义如下：\n\n```java\n@ReactProp(name = \"shouldNotifyLoadEvents\")\npublic void setLoadHandlersRegistered(\n    \t\tReactImageView view, \n    \t\tboolean shouldNotifyLoadEvents) {\n  view.setShouldNotifyLoadEvents(shouldNotifyLoadEvents);\n}\n```\n\n其中，可以看出：\n\n- 这四个回调必须指定 shouldNotifyLoadEvents prop 才会触发\n\n下面我们看 setShouldNotifyLoadEvents 的内部实现，核心代码如下：\n\n```java\nfinal EventDispatcher mEventDispatcher = ((ReactContext) getContext()).getNativeModule(UIManagerModule.class).getEventDispatcher();\n\nmControllerListener = new BaseControllerListener<ImageInfo>() {\n    @Override\n    public void onSubmit(String id, Object callerContext) {\n      mEventDispatcher.dispatchEvent(\n        new ImageLoadEvent(getId(), ImageLoadEvent.ON_LOAD_START));\n    }\n\n    @Override\n    public void onFinalImageSet(\n      String id,\n      @Nullable final ImageInfo imageInfo,\n      @Nullable Animatable animatable) {\n      if (imageInfo != null) {\n        mEventDispatcher.dispatchEvent(\n          new ImageLoadEvent(getId(), ImageLoadEvent.ON_LOAD,\n            mImageSource.getSource(), imageInfo.getWidth(), imageInfo.getHeight()));\n        mEventDispatcher.dispatchEvent(\n          new ImageLoadEvent(getId(), ImageLoadEvent.ON_LOAD_END));\n      }\n    }\n\n    @Override\n    public void onFailure(String id, Throwable throwable) {\n      mEventDispatcher.dispatchEvent(\n        new ImageLoadEvent(getId(), ImageLoadEvent.ON_ERROR,\n          true, throwable.getMessage()));\n    }\n  };\n}\n```\n\n其中：\n\n- 我们从 UIManagerModule 中获取到 EventDispatcher\n- 通过 EventDispatcher，我们能够从 Native 向 JS 发送 UI 事件\n- 这里的这几个回调就是通过 UI 事件在 JS 层触发的\n\n对于 EventDispatcher 的内部机制，限于篇幅我们暂不在本文中展开，点到为止。\n\n## Image.getSize\n\n在查看 React Native 的 Bug 列表时，发现有一个说 Image.getSize 方法在 Android 失效了。我想修复这个 Bug，因此需要研究这个方法的实现原理。\n\nIssue 详情参见[这里](https://github.com/facebook/react-native/issues/23816)。需要注意的是，这个 Bug 只在加载来自 Drawable 的图片时会出现，加载其他来源的图片没有问题。\n\n### Image.getSize\n\nImage.getSize 方法位于 js 侧 Image 组件，它的代码在 Libraries/Image/Image.android.js。\n\n其代码如下：\n\n```js\nfunction getSize(\n  url: string,\n  success: (width: number, height: number) => void,\n  failure?: (error: any) => void,\n) {\n  return ImageLoader.getSize(url)\n    .then(function(sizes) {\n      success(sizes.width, sizes.height);\n    })\n    .catch(\n      failure ||\n        function() {\n          console.warn('Failed to get size for image: ' + url);\n        },\n    );\n}\n```\n\n其中：\n\n- 由于 bug，这段代码会进入 catch 部分\n- 最终会在界面上报错 Failed to get size for image\n\n### ImageLoaderModule.getSize\n\n在上面的代码中，ImageLoader 是一个 Native Module，被映射到了 ImageLoaderModule 类，位于 com/facebook/react/modules/image/ImageLoaderModule.java。\n\n下面我们来看这个方法的实现。这个类的完整代码参见[这里](https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/modules/image/ImageLoaderModule.java)。\n\n首先方法签名：\n\n```java\n@ReactMethod\npublic void getSize(\n    final String uriString,\n    final Promise promise) {\n```\n\n其中：\n\n- uriString 是我们要加载的 Drawable 图片\n- promise 对应于 js 侧的 Promise\n\n例如，drawable 中有一个图片名为 `tv_banner`，在  js 侧会调用 `Image.getSize('tv_banner')`，传到上面 Java 侧的方法时，uriString 的值也是 `tv_banner`。\n\n下面我们来看 getSize 方法内部：\n\n```java\nUri uri = Uri.parse(uriString);\n```\n\n首先，Uri.parse 会将 uriString 转为 Android 中的 Uri。\n\n由于这里的信息非常少，解析得到的 Uri 里面许多字段都为空：\n\n![](image/ReactNativeCode1001.png)\n\n这里可能是导致问题的原因，我们先记住这里接着往下看。\n\nImageRequest 属于 Facebook 的 [imagepipeline 库](https://github.com/facebook/fresco/tree/master/imagepipeline)。这是 [Fresco 项目](https://github.com/facebook/fresco)的一个子项目。\n\n### ImagePipeline\n\n好在社区中有一篇官方文档[直接使用Image Pipeline](https://www.fresco-cn.org/docs/using-image-pipeline.html)，看起来跟我们的场景很像，快速学习一下。文档中的内容这里就不赘述了。\n\n我们回到 getSize 方法。\n\n首先是创建一个 ImageRequest：\n\n```java\nImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri).build();\n```\n\n之后是获取数据源：\n\n```java\nDataSource<CloseableReference<CloseableImage>> dataSource =\n    Fresco.getImagePipeline().fetchDecodedImage(request, mCallerContext);\n```\n\n之后是订阅数据：\n\n```java\nDataSubscriber<CloseableReference<CloseableImage>> dataSubscriber =\n  new BaseDataSubscriber<CloseableReference<CloseableImage>>() {\n    @Override\n    protected void onNewResultImpl(\n        DataSource<CloseableReference<CloseableImage>> dataSource) {\n      if (!dataSource.isFinished()) {\n        return;\n      }\n      CloseableReference<CloseableImage> ref = dataSource.getResult();\n      if (ref != null) {\n        try {\n          CloseableImage image = ref.get();\n\n          WritableMap sizes = Arguments.createMap();\n          sizes.putInt(\"width\", image.getWidth());\n          sizes.putInt(\"height\", image.getHeight());\n\n          promise.resolve(sizes);\n        } catch (Exception e) {\n          promise.reject(ERROR_GET_SIZE_FAILURE, e);\n        } finally {\n          CloseableReference.closeSafely(ref);\n        }\n      } else {\n        promise.reject(ERROR_GET_SIZE_FAILURE);\n      }\n    }\n\n    @Override\n    protected void onFailureImpl(DataSource<CloseableReference<CloseableImage>> dataSource) {\n      promise.reject(ERROR_GET_SIZE_FAILURE, dataSource.getFailureCause());\n    }\n  };\n```\n\n最后是实际执行订阅操作：\n\n```java\ndataSource.subscribe(dataSubscriber, CallerThreadExecutor.getInstance());\n```\n\n在上面的大代码块中，有多处异常逻辑，都会导致 promise.reject，最终是哪个导致的呢？\n\n我们都下断点来 Debug 一下，发现最终落入了 onFailureImpl。\n\n### fetchDecodedImage\n\nonFailureImpl 是在哪个步骤出错的呢？这个要看图片实际加载的过程，这个过程位于 com.facebook.imagepipeline.core.ImagePipeline#fetchDecodedImage(com.facebook.imagepipeline.request.ImageRequest, java.lang.Object, com.facebook.imagepipeline.request.ImageRequest.RequestLevel, com.facebook.imagepipeline.listener.RequestListener) 方法。\n\n发现异常是从这一句抛出来的：\n\n```java\nProducer<CloseableReference<CloseableImage>> producerSequence =\n    mProducerSequenceFactory.getDecodedImageProducerSequence(imageRequest);\n```\n\n异常原因是什么呢？\n\n```\njava.lang.IllegalArgumentException: Unsupported uri scheme! Uri is: tv_banner\n```\n\n从中可以看出，问题确实出在这个 Uri 身上。\n\n### Android drawable URI\n\nAndroid 的 Drawable uri 应该是什么样的呢？\n\n它的格式可以参考下面文章：\n\n- [Get URI from drawable image](https://stackoverflow.com/questions/19566840/get-uri-from-drawable-image)\n\n- [Get the URI of an image stored in drawable](https://stackoverflow.com/questions/6602417/get-the-uri-of-an-image-stored-in-drawable)\n\n## 结论\n\n在本文中，我们深入分析了 Image 组件的实现原理。包括：\n\n- 图片展示\n- 回调\n- source 处理\n- Image.getSize\n\n同时 Image.getSize 是以跟踪问题的形式进行调试，并最终找到了问题所在。"},"path":"post/ReactNativeCode10md"}
