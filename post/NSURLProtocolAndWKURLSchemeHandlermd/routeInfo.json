{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"NSURLProtocol & WKURLSchemeHandler 初识","desc":"想在 WKWebView 里拦截请求该怎么做呢？","type":"md","link":"NSURLProtocolAndWKURLSchemeHandlermd","create":"2018-06-26","filename":"NSURLProtocolAndWKURLSchemeHandler.md"},"content":"## 介绍\n\nNSURLProtocol 对象处理特定协议 URL 数据的加载。\n\nNSURLProtocol 类自己是一个抽象类，提供了处理带有特定 Scheme 的 URL 的基础方法。\n\n开发者为 App 所需要支持的自定义协议或者 URL Scheme 创建子类。\n\n## NSURLProtocol 的抽象方法\n\ncanInitWithRequest：\n\n- 这个方法判断 protocol 是否能处理给出的请求\n\ncanonicalRequestForRequest:\n\n- 返回给出请求的 canonical version\n\nrequestIsCacheEquivalent:toRequest\n\n- 考虑 Cache 的情况下判断两个请求是否等同\n\nstartLoading:\n\n- 请求的正式加载\n\nstopLoading:\n\n- 请求停止加载\n\n## NSURLProtocol 的抽象方法\n\n通过网上的文档了解到，在之前（iOS 10 之前），WKWebView 想要使用 NSURLProtocol 做拦截是不容易的，需要通过反射访问私有 API。\n\niOS 提供了 WKURLSchemeHandler，这个问题迎刃而解。\n\n具体使用可以参考 [Intercepting UIWebView & WKWebView — Custom URL Scheme handling](https://medium.com/@kumarreddy_b/custom-scheme-handling-in-uiwebview-wkwebview-bbeb2f3f6cc1)。\n\n我想做的事也能够实现了。"},"path":"post/NSURLProtocolAndWKURLSchemeHandlermd"}
