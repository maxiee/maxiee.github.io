{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"Emacs 使用 irony-mode 进行代码补全","desc":"Emacs 搭建 C/C++ 开发环境时如何配置代码补全呢？我选择使用 irony-mode，它是一个 C/C++ 的 minor mode，作用是代码补全。其内部基于 libclang 实现。在本文中，我将介绍 irony-mode 的配置方法。","type":"md","link":"EmacsIronyModemd","create":"2018-12-17","filename":"EmacsIronyMode.md"},"content":"## 介绍\n\nEmacs 搭建 C/C++ 开发环境时如何配置代码补全呢？我选择使用 irony-mode，它是一个 C/C++ 的 minor mode，作用是代码补全。其内部基于 libclang 实现。在本文中，我将介绍 irony-mode 的配置方法。\n\n## libclang\n\nirony-mode 基于 libclang，libclang 是什么呢？它的主页在[这里](https://clang.llvm.org/doxygen/group__CINDEX.html)。\n\n其介绍为：\n\n> The C Interface to Clang provides a relatively small API that exposes facilities for parsing source code into an abstract syntax tree (AST), loading already-parsed ASTs, traversing the AST, associating physical source locations with elements within the AST, and other facilities that support Clang-based development tools.\n\nC/C++ 语言的 C 接口，提供了一个相对较小的 API，暴露特性包括：将源代码解析为抽象语法树（AST），加载已经解析出来的 AST，遍历 AST，将物理位置与 AST 对应位置建立关联，以及其它支持基于 C/C++ 语言开发工具的功能。\n\n## irony-server\n\nirony-mode 采用 C/S 架构，C 部分作为 Emacs 的 Irony Mode，在运行时调用 irony-server。\n\n[irony-server](https://github.com/Sarcasm/irony-mode/blob/master/irony-server.rst) 由 C++ 编写实现，它是对 libclang 的一层封装，向 Irony Mode 提供可调用的接口。文档中说，irony-server 使用了一种基于 S 表达式的简单协议，来实现代码补全。\n\nTODO：代码补全的原理具体是如何实现的呢？后续有时间再研究下。\n\nirony-server 从 melpa 下载下来时是源代码的形式，需要在本机进行编译，因此需要本机满足依赖：CMake（>= 2.8.3） 和 libclang。\n\n## 安装与设置\n\n安装参考[项目首页](https://github.com/Sarcasm/irony-mode)。需要指出的是在 macOS 下的安装过程要麻烦一些。主要问题出在用于编译 irony-server 的 LLVM，在 macOS 下好像 libclang 有点问题。\n\nmacOS LLVM 的解决方法可以参考[这篇 wiki](https://github.com/Sarcasm/irony-mode/wiki/Mac-OS-X-issues-and-workaround)。\n\n下面给出我的设置，我使用了 use-package 来管理依赖：\n\n```lisp\n(use-package irony\n  :defer t\n  :diminish irony-mode\n  :init\n  (add-hook 'c++-mode-hook 'irony-mode-when-supported)\n  (add-hook 'c-mode-hook 'irony-mode-when-supported)\n  :config\n  (irony-cdb-autosetup-compile-options))\n```\n\n## Company 补全\n\n如果你使用 Company 进行代码补全，为了能让 irony-mode 与 Company 衔接起来，需要安装包 [company-irony](https://github.com/Sarcasm/company-irony)。\n\n具体安装方式参考官方文档，我的具体设置将在下一节中一起给出。\n\n## 头文件补全\n\nirony-mode 美中不足的一点在于它无法补全头文件。有一个包 [company-irony-c-headers](https://github.com/hotpxl/company-irony-c-headers) 弥补了这一问题。\n\n具体安装方式参考官方文档，需要注意的是，在向 company-backend 添加 backend 的时候，company-irony-c-headers 要在 company-irony 之前添加。\n\n最终，我的 Company 的设置为：\n\n```lisp\n(use-package company-irony-c-headers\n  :after irony)\n\n(use-package company-irony\n  :after (irony company-irony-c-headers)\n  :config\n  (add-to-list 'company-backends '(company-irony-c-headers company-irony)))\n```\n\n## 使用效果\n\n下面通过几张图来展示下 irony-mode 的使用效果。\n\n① 头文件补全\n\n![](image/WX20181217-222519.png)\n\n其中：\n\n- 成功识别出了系统中的头文件\n\n② 方法补全\n\n![](image/WX20181217-222637.png)\n\n其中：\n\n- 方法名称与参数类型都展示地非常完整\n\n"},"path":"post/EmacsIronyModemd"}
