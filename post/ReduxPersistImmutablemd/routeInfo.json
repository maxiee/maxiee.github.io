{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Native Redux、redux-persist、immutable.js 结合实践","desc":"在我的 React Native APP 架构中，我选择 Redux 作为状态管理器。同时我使用 redux-persist 进行数据持久化，使用 immutable.js 进行 Redux 状态更新。所遇到的问题是这两者的兼容，需要进行额外的设置。","type":"md","link":"ReduxPersistImmutablemd","create":"2019-04-12","filename":"ReduxPersistImmutable.md"},"content":"## 前言\n\n在我的 React Native APP 架构中，我选择 Redux 作为状态管理器。同时我使用 redux-persist 进行数据持久化，使用 immutable.js 进行 Redux 状态更新。所遇到的问题是这两者的兼容，需要进行额外的设置。\n\n在本文中我仅记录可工作的操作过程，其背后的原理还需要未来进一步研究。\n\n首先所需要的库如下，通过 npm 或者 yarn 进行安装：\n\n- immutable\n- redux\n- redux-immutable\n- redux-persist\n- redux-persist-transform-immutable\n- redux-thunk：如果你用到异步消息的话\n\nredux-persist 与 immutable.js 不兼容的关键在于前者无法理解后者所特有的数据结构。\n\n而 redux-persist-transform-immutable 这个库就是利用了 redux-persist 的 transformer 机制，抹平了这个问题。\n\n因此，我们只需要正确设置，就能让他们正常运转起来。\n\n在这里不得不感慨 Redux 生态的架构合理性，不在于代码量的多少，关键在于是否想明白、想透彻，有时候最好的解决方案的代码其实很少。\n\n## Redux Store\n\n以下是我的 Redux Store 的设置过程，我将注意点都写在注释当中：\n\n```js\n// Redux 的正常用法\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport WeightReducer from '../bots/Weight/redux/WeightReducer';\nimport thunk from \"redux-thunk\";\n// redux-persist 的正常用法\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { AsyncStorage } from 'react-native';\n// 导入 transformer\nimport immutableTransform from 'redux-persist-transform-immutable';\nimport { createLogger } from 'redux-logger';\n\n// 创建 Reducer\nconst rootReducer = combineReducers({\n    // bots\n    WeightReducer\n    // services\n});\n\n// 创建持久化设置\nconst persistConfig = {\n    transforms: [immutableTransform()], // 重点：配置上 immutableTransform\n    key: 'root',\n    storage: AsyncStorage\n}\n\n// redux-persist 的正常用法\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middleWares = [];\nmiddleWares.push(thunk);\nconst loggerMiddleware = createLogger({\n    predicate: () => process.env.NODE_ENV === 'development',\n});\nmiddleWares.push(loggerMiddleware);\n\n// Redux 的正常用法\nconst store = createStore(\n    persistedReducer,\n    applyMiddleware(...middleWares)\n);\n\n// redux-persist 的正常用法\nexport const persistor = persistStore(store)\n\nexport default store;\n```\n\n大功告成！是不是很简单 😆"},"path":"post/ReduxPersistImmutablemd"}
