{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"Django Tag 管理","desc":"对数据添加 Tag（标签）是一种常见的功能，Tags 使用简单高效的分类方式，由 Tag 生成的 Tag Cloud 更是一种酷炫的可视化方式。在 Django 中改如何添加 Tag 呢？我们不需要从头开始，直接使用现成的扩展包就可以了。","type":"md","link":"DjangoTagsmd","create":"2018-11-12","filename":"DjangoTags.md"},"content":"## 前言\n\n对数据添加 Tag（标签）是一种常见的功能，Tags 使用简单高效的分类方式，由 Tag 生成的 Tag Cloud 更是一种酷炫的可视化方式。在 Django 中改如何添加 Tag 呢？我们不需要从头开始，直接使用现成的扩展包就可以了。\n\n## django-taggit\n\n[django-taggit](https://github.com/alex/django-taggit) 为 Django 添加了标签管理功能。\n\n### 安装\n\nStep1 首先安装包：`pip3 install django-taggit`。\n\nStep2 在 `INSTALLED_APPS` 中加入 \"taggit\"。\n\n至此就安装完成了。\n\n### 集成\n\n在 Models 中按照如下方式添加字段：\n\n```python\nfrom django.db import models\n\nfrom taggit.managers import TaggableManager\n\nclass Food(models.Model):\n    # ... fields here\n\n    tags = TaggableManager()\n```\n\n### 使用\n\n使用的 API 参考官方文档：\n\n```\n>>> apple = Food.objects.create(name=\"apple\")\n>>> apple.tags.add(\"red\", \"green\", \"delicious\")\n>>> apple.tags.all()\n[<Tag: red>, <Tag: green>, <Tag: delicious>]\n>>> apple.tags.remove(\"green\")\n>>> apple.tags.all()\n[<Tag: red>, <Tag: delicious>]\n>>> Food.objects.filter(tags__name__in=[\"red\"])\n[<Food: apple>, <Food: cherry>]\n\n```\n\n## Restframework\n\n如果你同时也使用了 Restframework 扩展，需要一个扩展来对 taggit 进行支持，这个扩展包是 [django-taggit-serializer](https://github.com/glemmaPaul/django-taggit-serializer)。\n\n### 安装\n\nStep1 `pip3 install django-taggit-serializer`。\n\nStep2 在 `INSTALLED_APPS` 中加入 `taggit_serializer`。\n\n至此就安装完成了。\n\n### 集成\n\n在对应的 Serializers 中采用如下写法：\n\n```python\nfrom taggit_serializer.serializers import (TagListSerializerField,\n                                           TaggitSerializer)\n\n\nclass YourSerializer(TaggitSerializer, serializers.ModelSerializer):\n\n    tags = TagListSerializerField()\n\n    class Meta:\n        model = YourModel\n```\n\n再次 runserver，在 Restframework 的调试网页中即出现了标签的输入框，在其中我们可以添加标签了。\n\n### 格式\n\n需要注意的是，在添加的时候必须以 JSON 数组的形式，如：\n\n```json\n[\"读书\", \"学习\"]\n```\n\n### filter\n\n如何使用 Restframework 自动创建的 RESTFul API 进行 Tag 搜索呢？\n\n有两种方法：\n\n一种是直接使用 Restframework 自动生成的 API，结合 django-filter 进行搜索。这个方法由于我对这两个框架的内部原理还不熟悉，没有打通成功。\n\n因此我暂时使用第二种方法，再创建一个 API 接口，专门用于 Tag 查询：\n\nView:\n\n```python\nclass FindTags(generics.ListAPIView):\n    serializer_class = ProjectSerializer\n    lookup_url_kwarg = 'tag'\n\n    def get_queryset(self):\n        tag = self.kwargs.get(self.lookup_url_kwarg)\n        return Project.objects.filter(tags__name__in=[tag])\n```\n\nurl:\n\n```python\n    path('projects/tag/<str:tag>', views.FindTags.as_view())\n```\n\n网络资料：\n\n- [Filter by multiple django-taggit tags with Django Rest Framework](https://stackoverflow.com/questions/41279335/filter-by-multiple-django-taggit-tags-with-django-rest-framework)\n- [Using django-rest-framework with tagged items (django-taggit)](https://blog.pedesen.de/2013/07/06/Using-django-rest-framework-with-tagged-items-django-taggit/)\n- [FilterSet Options](https://django-filter.readthedocs.io/en/master/ref/filterset.html#filter-overrides)\n\n## 总结\n\n至此，我们的 Web App 中就具备 Tag 管理的功能了。我们自己一共没写两行代码，就获得了一个稳定可靠、功能全面的标签功能。这说明了 Python、Django 开发的高效率，也印证了那句名言：“人生苦短，我用 Python”。"},"path":"post/DjangoTagsmd"}
