{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"react-static 静态网站搭建（三）：React 静态博客 Step by Step","desc":"经过前面两篇文章，相信大家已经对静态博客和 react-static 有了充分的认识。在本节我们来一个实战环节，手把手教你如何用 react-static 搭建一个静态博客。","type":"md","link":"ReactStatic3md","create":"2019-03-18","filename":"ReactStatic3.md"},"content":"## 前言\n\n经过前面两篇文章，相信大家已经对静态博客和 react-static 有了充分的认识。在本节我们来一个实战环节，手把手教你如何用 react-static 搭建一个静态博客。\n\n## 安装\n\n首先需要安装 react-static ：\n\n```\n$ yarn global add react-static\n# or\n$ npm install -g react-static\n```\n\n其中：\n\n- react-static 作为全局命令进行安装\n\n## 创建工程\n\n在你想创建工程的目录执行以下命令：\n\n```\n$ react-static create\n```\n\n命令行会提示几个问题：\n\n① 项目叫什么名字：\n\n```\n? What should we name this project? (my-static-site)\n```\n\n输入一个自己想要的名称。\n\n② 选择哪种模板：\n\n```\n? Select a template below... (Use arrow keys or type to search)\n❯ README.md\n  basic\n  blank\n  stress-test\n  typescript\n  Local Directory...\n  GIT Repository...\n```\n\n这里我选择了 typescript，因为我是 typescript 党，在这里顺道安利一下 😆\n\n之后就开始项目创建过程，react-static 会调用包管理器创建工程、安装依赖，因此需要等待几分钟时间。\n\n需要注意的是：我使用的包管理器是 Yarn，之前我在用 npm 创建工程的时候失败过一次。\n\n依赖安装好后，会提示你如何开始：\n\n```\n=> [✓] Project \"react-static-blog-demo\" created (89.7s)\n\n  => To get started:\n\n    cd \"react-static-blog-demo\"\n\n    yarn start - Start the development server\n    yarn build - Build for production\n    yarn serve - Test a production build locally\n```\n\n这几个命令都很有用，需要牢记。\n\n下面 `cd \"react-static-blog-demo\"` 进入工程，开搞！\n\n# Hello world！\n\n首先我们把项目先跑起来。在项目根目录，执行下面命令：\n\n```\nyarn start\n```\n\n终端会显示以下信息：\n\n```\nyarn run v1.13.0\n$ react-static start\n=> Building Routes...\n=> [✓] Routes Built (1.2s)\n=> Building Templates\n=> [✓] Templates Built\n=> Building App Bundle...\nStarting type checking service...\nUsing 1 worker with 2048MB memory limit\n=> [✓] Build Complete (10.3s)\n=> [✓] App serving at http://localhost:3000\n=> File changed: /artifacts/react-static-templates.js\n=> Updating build...\n=> [✓] Build Updated (0.5s)\n```\n\n等了半天你会奇怪，为啥浏览器还没有打开呢？\n\n因为构建成功是不会自动打开浏览器的！！需要自己手动打开 🤣 \n\n在浏览器中输入地址 http://localhost:3000，会打开项目首页：\n\n![](image/ReactStatic301.png)\n\n其中，我们发现：\n\n- 示例工程已经为我们搭建好一个博客站点了\n- 这个站点包括首页、关于、博客，完全满足一般的博客需求\n- 这也意味着我们不用从头开始\n\n进入 Blog 板块（/blog）看看：\n\n![](image/ReactStatic302.png)\n\n其中：\n\n- 实例工程还插入了很多 mock 数据\n- 后面我们会讲到，这些数据都是通过 API 接口在构建时获取的\n\n文章详情页（/blog/post/1/）：\n\n![](image/ReactStatic303.png)\n\n## 项目工程\n\n关于项目的整体结构，首先请参考 [react-static 静态网站搭建（二）：react-static 介绍](https://maxiee.github.io/post/ReactStatic2.md/)。\n\n在此我们主要看工程目录结构：\n\n```\n.\n├── README.md\n├── artifacts\t\t\t// react-static 自动生成的项目描述\n│   ├── react-static-browser-plugins.js\n│   └── react-static-templates.js\n├── node_modules\n├── package.json\t\t// 工程描述文件\n├── public\t\t\t\t// 公共资源目录\n│   └── robots.txt\n├── src\t\t\t\t\t// 代码目录\n│   ├── App.tsx\t\t\t// 网站整体结构定义\n│   ├── app.css\t\t\t// 网站全局 css\n│   ├── components\t\t// React 组件\n│   ├── containers\t\t// 容器：Post.tsx 帖子页\n│   ├── index.tsx\t\t// 网站入口，react-static 初始化相关，导入 App\n│   ├── pages\t\t\t// 页面：404.tsx、about.tsx、blog.tsx、index.tsx\n│   └── types.ts\t\t// 数据类型定义\n├── static.config.js\t// react-static 配置文件\n├── tmp\n│   └── dev-server\n├── tsconfig.json\t\t// TypeScript 配置脚本\n└── yarn.lock\n```\n\n其中，我们关心的有：\n\n### src/App.tsx\n\n它定义了网站的整体框架：顶部导航栏、侧边栏，以及划定内容区的范围。各个页面都展示在内容区当中。\n\n```tsx\nimport React from 'react'\nimport { Root, Routes } from 'react-static'\nimport { Link } from '@reach/router'\nimport './app.css'\nimport FancyDiv from '@components/FancyDiv'\n\nfunction App() {\n  return (\n    <Root>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/about\">About</Link>\n        <Link to=\"/blog\">Blog</Link>\n      </nav>\n      <div className=\"content\">\n        <FancyDiv>\n          <Routes />\n        </FancyDiv>\n      </div>\n    </Root>\n  )\n}\n\nexport default App\n```\n\n其中：\n\n- Root 和 Routes 都来自 react-static，Routes 表示内容区\n- 项目使用了 @reach/router 的 Link 组件，用来做站内跳转\n\n### src/index.tsx\n\n这个文件是网站的入口，主要用于 react-static 初始化，一般不需要改动：\n\n```tsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n// Your top level component\nimport App from './App'\n\n// Export your top level component as JSX (for static rendering)\nexport default App\n\n// Render your app\nif (typeof document !== 'undefined') {\n  const renderMethod = module.hot\n    ? ReactDOM.render\n    : ReactDOM.hydrate || ReactDOM.render\n\n  const render = (Comp: Function) => {\n    renderMethod(<Comp />, document.getElementById('root'))\n  }\n\n  // Render!\n  render(App)\n\n  // Hot Module Replacement\n  if (module.hot) {\n    module.hot.accept('./App', () => render(require('./App').default))\n  }\n}\n```\n\n其中：\n\n- 导入了 App.tsx\n- 初始化了热加载\n\n### src/pages/index.tsx\n\n这个 index 不要与上一节搞混，它是网站的首页。\n\n```tsx\nimport React from 'react'\nimport { withSiteData } from 'react-static'\n\nexport default withSiteData(() => (\n  <div style={{ textAlign: 'center' }}>\n    <h1>\n      Welcome to React-Static <br /> + TypeScript\n    </h1>\n    <p>\n      Learn{' '}\n      <a href=\"https://github.com/sw-yx/react-typescript-cheatsheet\">\n        React + TypeScript\n      </a>\n    </p>\n    <p>\n      <a href=\"https://twitter.com/swyx\">Report issues with this template</a>\n    </p>\n  </div>\n))\n```\n\n其中：\n\n- 通过 withSiteData 这个高阶组件，能够拿到 static.config.js 中提供的 getSiteData，不过这里很简单，并没有从中获取数据\n\n### src/pages/blog.tsx\n\n这里对应的是博客列表页：\n\n```tsx\nimport React from 'react'\nimport { withRouteData } from 'react-static'\nimport { Link } from '@reach/router'\nimport { Post } from '../types'\n\nexport default withRouteData(({ posts }: { posts: Post[] }) => (\n  <div>\n    <h1>It's blog time.</h1>\n    <br />\n    All Posts:\n    <ul>\n      {posts.map(post => (\n        <li key={post.id}>\n          <Link to={`/blog/post/${post.id}/`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  </div>\n))\n```\n\n其中：\n\n- 使用 withRouteData 这个高阶组件，拿到的是 static.config.js 向这个路径提供的数据，即博客列表\n\n### src/containers/Post.tsx\n\n这对应的是文章详情页。\n\n眼尖的同学会发现代码路径变到了 containers 下，这是因为在 react-static 中，一级路由会自动映射到 `src/pages/*.tsx` 下，而二级路由需要手动指定组件。当然，containers 的命名没有限制，改名叫 `src/subPage/Post.tsx` 也没问题，只要在 static.config.js 配置二级路由组建时写对路径就行。\n\n文章详情页的代码为：\n\n```tsx\nimport React from 'react'\nimport { withRouteData } from 'react-static'\nimport { Link } from '@reach/router'\nimport { Post } from '../types'\n\nexport default withRouteData(({ post }: { post: Post }) => (\n  <div>\n    <Link to=\"/blog/\">{'<'} Back</Link>\n    <br />\n    <h3>{post.title}</h3>\n    <p>{post.body}</p>\n  </div>\n))\n```\n\n其中可以看出，与博客列表页所使用的套路是完全一致的，都是通过 withRouteData 这个高阶组件，来拿去对应的数据。\n\n从这里可以看出，react-static 一单适应它定义的规则，使用起来是非常简单的！ 🎉\n\n## 数据提供\n\n下面我们来看 static.config.js 中，是如何向这些页面提供数据的：\n\n```js\nimport axios from 'axios'\nimport path from 'path'\n\nexport default {\n  plugins: ['react-static-plugin-typescript'],\t\t\t// 使用 TypeScript\n  entry: path.join(__dirname, 'src', 'index.tsx'),\t\t// 指定入口文件\n  getSiteData: () => ({\t\t\t\t\t\t\t\t\t// 指定 SiteData\n    title: 'React Static',\n  }),\n  getRoutes: async () => {\t\t\t\t\t\t\t\t// 定义路由\n    const { data: posts } = await axios.get(\t\t\t// 数据准备阶段\n      'https://jsonplaceholder.typicode.com/posts',\t\t// 通过这个 API 拉取数据\n    )\n    return [\t\t\t\t\t\t\t\t\t\t\t// 返回路由表\n      {\n        path: '/blog',\t\t\t\t\t\t\t\t\t// 博客列表页\n        getData: () => ({\t\t\t\t\t\t\t\t// 提供博客列表页的 RouteData\n          posts,\n        }),\n        children: posts.map(post => ({\t\t\t\t\t// 子页面：各个文章详情页\n          path: `/post/${post.id}`,\t\t\t\t\t\t// 路径\n          component: 'src/containers/Post',\t\t\t\t// 指定组件\n          getData: () => ({\t\t\t\t\t\t\t\t// 提供文章详情页的 RouteData\n            post,\n          }),\n        })),\n      },\n    ]\n  },\n}\n\n```\n\n是不是非常简单直观！其中：\n\n- 数据提供是我们直接写 js 代码来获取的\n- 你会发现：src/pages/index.tsx、src/pages/about.tsx 都没再上面出现，这是因为 react-static 中有一个约定，src/pages/ 下的页面(高阶组件)，会自动为他们配置路径。但是如果你要向它们提供数据的话，还得在上面来指定，如 /blog。\n\n## 数据从何处来？\n\n在示例工程中，数据是调用 API 接口来获取的。\n\n有一点需要弄清的是，这里从 API 获取数据发生在构建时，只在构建时执行一次。react-static 会拿这一次获取到的数据生成静态网站。\n\n这也就是说，当一次构建发布后，如果 API 有了更新，线上的网站不会更新，除非再执行一次构建过程。别忘了我们是静态网站！\n\n能不能不从 API 中获取呢？当然可以。\n\n上面代码中 getRoutes 就是个 node.js 的方法，怎么获取数据完全由你编写的 js 代码控制。\n\n我们开下脑洞，可以如何获取数据呢？\n\n- 扫描某个文件夹下的 Markdown (maxiee.github.io 就是这种方法)\n- 读取某个 SQLite 数据库\n- 读取 MySQL、MongoDB\n- 读取 OrgMode 笔记\n- ……\n\n## 数据的 json 保存\n\nreact-static 采取数据与模板分离的模式。\n\n我们在 react-static 中提供数据，在模板中通过 withRouteData 接收数据。\n\n这些数据在构建时会被保存为 json 文件。\n\n我们下面来验证这个过程，首先构建项目：\n\n```\nyarn build\n```\n\n经历了 25.02s 之后，我完成了构建。\n\n你会想一个空的工程为何构建需要这么多时间呢？这是因为要启动 Pyppeteer 进行 DOM snapshot。\n\n我在实践中发现，当我有上百篇文章需要静态化的时候，构建时间也不过 80.44s。平均一个页面增长 0.5s，这个速度是非常令人满意的！\n\n说到这我在多说两句，在使用 react-static 之前，我独立开发了一个静态网站生成器。一开始用着挺好，可它的致命缺陷是，生成时间随着页面数量急速上升，同时稳定性也下降，开始出现构建失败的情况。\n\n这件事给我的经验就是，没有两把刷子就不要造车轮，先提高自己的姿势水平。所以我现在不自己瞎折腾了，改为翻译优秀文章，收获与提高更大！\n\n构建完成后的静态站点位于 dist 目录下：\n\n```\n\n├── 404\n│   └── routeInfo.json\n├── 404.html\n├── about\n│   ├── index.html\n│   └── routeInfo.json\n├── blog\n│   ├── index.html\n│   ├── post\n│   └── routeInfo.json\n├── index.html\n├── main.6643724f.js\n├── main.6643724f.js.map\n├── robots.txt\n├── routeInfo.json\n├── static.4e7b9259.js\n├── static.4e7b9259.js.map\n├── styles.97353e12.css\n```\n\n我们主要来看 `blog/post/` 下，上面的结构中没有展开这块，我们进去后继续看：\n\n```\n.\n├── 1\n│   ├── index.html\n│   └── routeInfo.json\n├── 10\n│   ├── index.html\n│   └── routeInfo.json\n├── 100\n│   ├── index.html\n│   └── routeInfo.json\n├── 11\n│   ├── index.html\n│   └── routeInfo.json\n├── 12\n│   ├── index.html\n│   └── routeInfo.json\n├── 13\n│   ├── index.html\n│   └── routeInfo.json\n├── 14\n│   ├── index.html\n│   └── routeInfo.json\n……\n```\n\n我们会看到如下结构，其中：\n\n- 以数字命名的目录自然想到就是我们的 postID\n- 每个目录下都包含两个文件\n    - index.html：静态化网页，文章内容被固化在 HTML 里面了，待会儿我们详细看一看\n    - routeInfo.json：static.config.js 中为每个帖子提供的数据被保存为 routeInfo.json\n\n### routeInfo.json 是干嘛的\n\n我们首先会有疑问，routeInfo.json 是干嘛的？index.html 中把帖子数据固化进去了，为啥外面还要存一份 routeInfo.json 呢？\n\n让我们设想一种场景，从 1 号文章跳转到 2 号文章，如何做呢？\n\n- 我们可以从 1 号的 index.html 跳转到 2 号的 index.html\n- 但是这样会把 2 号的 index.html，重新下载一遍\n- 我们已经知道，1 号与 2 号的 index.html 除了内容区外都是一样的，如果重新下载一遍，除了内容外的数据下来都是浪费\n- 能不能只下载内容呢？\n- react-static 说可以，只需要下载 2 号的 routeInfo.json 就可以了\n\n所以说，react-static 构建出来的站点速度非常非常快！⚡️⚡️而 routeInfo.json 只是其针对速度的优化之一！\n\n我们以 1 号博客为例，看看他的 routeInfo.json：\n\n```json\n{\n    \"template\": \"../src/containers/Post\",\n    \"sharedHashesByProp\": {},\n    \"data\": {\n        \"post\": {\n            \"userId\": 1,\n            \"id\": 1,\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n        }\n    },\n    \"path\": \"blog/post/1\"\n}\n```\n\n可以看出：\n\n- 这就是我们在 static.config.js 中提供的数据，附带了一些 meta 信息，比如指定模板路径\n\n###  dist/blog/post/1/index.html\n\n下面我们再来看看 1 号博客的静态 HTML：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <link rel=\"preload\" as=\"script\" href=\"/templates/src-containers-Post.634b5ebb.js\" />\n    <link rel=\"preload\" as=\"script\" href=\"/templates/styles.97353e12.js\" />\n    <link rel=\"preload\" as=\"script\" href=\"/templates/vendors~main.9dfd262a.js\" />\n    <link rel=\"preload\" as=\"script\" href=\"/main.6643724f.js\" />\n    <link rel=\"preload\" as=\"style\" href=\"/styles.97353e12.css\" />\n    <link rel=\"stylesheet\" href=\"/styles.97353e12.css\" />\n    <meta charSet=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5, shrink-to-fit=no\" />\n</head>\n\n<body>\n    <div id=\"root\">\n        <div style=\"outline:none\" tabindex=\"-1\" role=\"group\">\n            <nav><a href=\"/\">Home</a><a href=\"/about\">About</a><a href=\"/blog\">Blog</a></nav>\n            <div class=\"content\">\n                <div style=\"border:1px solid red\">\n                    <div><a href=\"/blog/\">&lt;\n                            <!-- --> Back</a><br />\n                        <h3>sunt aut facere repellat provident occaecati excepturi optio reprehenderit</h3>\n                        <p>quia et suscipit\n                            suscipit recusandae consequuntur expedita et cum\n                            reprehenderit molestiae ut ut quas totam\n                            nostrum rerum est autem sunt rem eveniet architecto</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script type=\"text/javascript\">\n        window.__routeInfo = { \"template\": \"../src/containers/Post\", \"sharedHashesByProp\": {}, \"data\": { \"post\": { \"userId\": 1, \"id\": 1, \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\", \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\" } }, \"path\": \"blog/post/1\", \"siteData\": { \"title\": \"React Static\" } };</script>\n    <script defer=\"\" type=\"text/javascript\" src=\"/templates/src-containers-Post.634b5ebb.js\"></script>\n    <script defer=\"\" type=\"text/javascript\" src=\"/templates/styles.97353e12.js\"></script>\n    <script defer=\"\" type=\"text/javascript\" src=\"/templates/vendors~main.9dfd262a.js\"></script>\n    <script defer=\"\" type=\"text/javascript\" src=\"/main.6643724f.js\"></script>\n</body>\n\n</html>\n```\n\n其中：\n\n- head 去加载了一堆 js，带有 preload 属性，是预加载的 js\n- 在 body 末尾也加载一堆 js\n- 这些 js 我们先不去管它\n- 中间的 body 部分是已经固化的文章，这就意味着，就算这些 js 都没加载完，只要 HTML 下载下来，文章就已经展示出来了\n- 我们会发现有一个奇怪的 `window.__routeInfo` 脚本，这里面的内容一看就是上一节的 routeInfo.json，这是怎么回事呢？\n- 原来，HTML 下载下来，文章展示出来后并没有结束。js 还在继续下载着，一旦下载完成，会运行 React 框架，运行你的 APP，运行你的 1 号文章的组件代码，传入 `window.__routeInfo`，又把你这篇文章的代码重新跑了一遍，并再次输出到网页上\n- 但是由于前后页面的 DOM 是完全一样的，用户对此是无感知的(背后竟然干了这种事情！)\n\n为什么要再跑一次呢？\n\n请参见我 [react-static 静态网站搭建（一）：什么是 React 静态网站？](https://maxiee.github.io/post/ReactStatic1.md/) 中的最后一节 **One more thing**。\n\n一句话概括就是：**就是让用户用访问静态网站的速度，得到 SPA 的丰富体验。**\n\n## 之后呢\n\n示例工程我们已经分析地十分透彻了。之后做什么呢？\n\n之后就是该 Getting your hands dirty 了：\n\n- 添加或者自己编写一个好看的 UI 库\n- 修改各个页面的模板\n- 选择一种适合自己工作流的数据提供方式\n- 开始编写自己的博客吧！\n\n## 结论\n\n经过这三篇的系列文章，我们已经明白了什么是静态网站，什么是 react-static，如何创建静态站点，尤其是静态博客。\n\n从下一篇开始，我将介绍各种用 react-static 创建网站的实用技巧。欢迎持续关注！"},"path":"post/ReactStatic3md"}
