{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Native 代码阅读（四）：React Native 中的各种 Context","desc":"Context 在 Android 开发中是一个很重要的概念，用于提供各种上下文服务。在 React Native 中，它对 Context 进行了扩展。在本文中我们来梳理 React Native 中的各种 Context（ReactContext，ReactApplicationContext）。","type":"md","link":"ReactNativeCode4md","create":"2019-02-18","filename":"ReactNativeCode4.md"},"content":"## 前言\n\nContext 在 Android 开发中是一个很重要的概念，用于提供各种上下文服务。在 React Native 中，它对 Context 进行了扩展。在本文中我们来梳理 React Native 中的各种 Context（ReactContext，ReactApplicationContext）。\n\n## 继承关系\n\n这几个 Context 类满足如下继承关系：\n\n-   ContextWrapper\n    -   ReactContext\n        -   ReactApplicationContext\n\n## ReactContext\n\nReactContext 在 ContextWrapper 的基础上提供了哪些能力呢？\n\n具体包括如下：\n\n存放 CatalystInstance 实例引用：\n\n-   CatalystInstance mCatalystInstance\n\n方法三个线程的引用：\n\n-   MessageQueueThread mUiMessageQueueThread\n-   MessageQueueThread mNativeModulesMessageQueueThread\n-   MessageQueueThread mJSMessageQueueThread\n\n（从这里我们也能看出，React Native 在运行时启动了 3 条线程。）\n\n存放原生模块异常处理器：\n\n-   NativeModuleCallExceptionHandler mNativeModuleCallExceptionHandler\n\n覆写了 getSystemService 的默认行为：\n\n-   修改了获取 Inflater 服务的逻辑\n-   在类中保存一个 Inflater 实例，而不是每次都创建一个新的\n\n生命周期回调管理：\n\n-   `CopyOnWriteArraySet<LifecycleEventListener> mLifecycleEventListeners`\n-   `CopyOnWriteArraySet<ActivityEventListener> mActivityEventListeners`\n-   有两种生命周期：\n    -   LifecycleEventListener 接收 Resume、Pause、Destroy 事件\n    -   ActivityEventListener 接收 newIntent、Result\n\n## ReactApplicationContext\n\nReactApplicationContext 继承自 ReactContext，它在其基础上提供了哪些能力呢？\n\n这个类啥能力也没提供，它唯一的作用就是在构造的时候获取 ApplicationContext。\n\n```java\n/**\n * A context wrapper that always wraps Android Application {@link Context} and\n * {@link CatalystInstance} by extending {@link ReactContext}\n */\npublic class ReactApplicationContext extends ReactContext {\n  // We want to wrap ApplicationContext, since there is no easy way to verify that application\n  // context is passed as a param, we use {@link Context#getApplicationContext} to ensure that\n  // the context we're wrapping is in fact an application context.\n  public ReactApplicationContext(Context context) {\n    super(context.getApplicationContext());\n  }\n}\n```\n\n## ReactApplication\n\n在 React Native 中还有一个类是 ReactApplication，千万不要把它跟 ReactApplicationContext 搞混了！\n\nReactApplication 是一个接口：\n\n```java\npublic interface ReactApplication {\n\n  /**\n   * Get the default {@link ReactNativeHost} for this app.\n   */\n  ReactNativeHost getReactNativeHost();\n}\n```\n\n它的使用场景在创建 Application 时实现这个接口，用于提供 ReactNativeHost。与我们本文中讨论的内容完全不相关。因此我们不详细说它，只要别搞混就行。\n\n## 创建\n\n在 Android APP 中，如果不写任何代码，我们只能拿到 Android Context，如何转到 ReactContext 呢？\n\n答案在 ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManager.java 的 createReactContext 方法中：\n\n在前面文章中我们梳理过，ReactInstanceManager 是通过一个 Builder 来构建的，构建时传入的一个参数是 Context，它存放在成员变量中：\n\n-   Context mApplicationContext;\n\ncreateReactContext 的具体逻辑在[React Native 代码阅读（一）：启动流程（Android）](https://maxiee.github.io/post/ReactNativeCode1.md/)的 ReactContext 的创建与绑定一节中已做梳理，这里不再赘述。\n\n其中有一行：\n\n```java\nfinal ReactApplicationContext reactContext = new ReactApplicationContext(mApplicationContext);\n```\n\n是用 mApplicationContext 创建了一个 ReactApplicationContext。\n\n## ReactInstanceManager 对 ReactApplicationContext 的使用\n\n上一节中我们分析了 ReactContext 的创建过程。在本节中，我们分析 ReactInstanceManager 是如何使用 ReactApplicationContext 的。\n\n首先，ReactApplicationContext 是在 runCreateReactContextOnNewThread 方法中被创建的。\n\n在方法中首先调用 createReactContext 并创建一个局部变量：\n\n```java\nfinal ReactApplicationContext reactApplicationContext =\n    createReactContext(\n        initParams.getJsExecutorFactory().create(),\n        initParams.getJsBundleLoader());\n```\n\n之后调用：\n\n```java\nsetupReactContext(reactApplicationContext);\n```\n\nsetupReactContext 方法对 reactApplicationContext 进行设置，我们来看它的内部实现：\n\n首先将 reactApplicationContext 存放到 ReactInstanceManager 类的 mCurrentReactContext 成员中：\n\n```java\nmCurrentReactContext = Assertions.assertNotNull(reactContext);\n```\n\n之后对 ReactContext 中存放的实例进行了一系列的初始化操作：\n\n-   CatalystInstance 初始化\n-   mDevSupportManager onNewReactContextCreated\n-   mMemoryPressureRouter addMemoryPressureListener\n-   将所有 ReactRootView 附加到 catalystInstance 上\n-   mReactInstanceEventListeners onReactContextInitialized 回调\n-   两条线程的优先级设置\n\n## 小结\n\n至此我们完成了 ReactNative 中 Context 的梳理。\n\n在本文中，我们知道了 ReactContext 与 Android Context 的关系，以及 ReactContext 中提供了哪些服务。\n\n同时我们也分析了 ReactInstanceManager 对 ReactApplicationContext 的使用。在 ReactInstanceManager 中，还有很多方法都需要传入 ReactContext 实例，供其他类使用，有了本文的知识这些都不在话下了。\n\n"},"path":"post/ReactNativeCode4md"}
