{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Native 代码阅读（十二）：Yoga 底层布局库(Android)","desc":"React Native 并没有使用 Android 原生的布局引擎，而是使用了 Facebook 的 Yoga 布局引擎。Yoga 引擎是跨平台的，它实现了 Flexbox 布局模式。在本文中，我们就来看看如何使用 React Native 的底层布局引擎 Yoga。","type":"md","link":"ReactNativeCode12md","create":"2019-03-26","filename":"ReactNativeCode12.md"},"content":"## 前言\n\nReact Native 并没有使用 Android 原生的布局引擎，而是使用了 Facebook 的 [Yoga](https://github.com/facebook/yoga) 布局引擎。Yoga 引擎是跨平台的，它实现了 Flexbox 布局模式。在本文中，我们就来看看如何使用 React Native 的底层布局引擎 Yoga。\n\n关于本文的实例代码请参见 [MaxieeRNLab](https://github.com/maxiee/MaxieeRNLab) 的 [YogaActivity](https://github.com/maxiee/MaxieeRNLab/blob/master/android/app/src/main/java/com/maxieernlab/yoga/YogaActivity1.java)。如果你觉得这个项目有所帮助，欢迎 Star！\n\n## Yoga 布局与 Android 原生布局的不同\n\n在最初解除 Yoga 的时候，完全搞不懂它是怎么来进行布局的。原因是我对 Android 布局的概念先入为主了。\n\n首先需要知道的是，Yoga 是一套完全独立的布局引擎，这也就是说它没有用到 Android 的布局逻辑。\n\n为了完成这个思维转变，让我们先想想 Android 原生是如何布局的？\n\n我们可能会写如下的布局：\n\n```xml\n<LinearLayout\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"/>\n</LinearLayout>\n```\n\n在写下这段布局的时候，我们就已经在使用 Android 原生的布局逻辑了：\n\n- 首先我们创建了一个 LinearLayout，它是一个线性容器布局，我们指定它的大小策略为横向充满，纵向包裹内容，沿竖向进行排列\n- 在 LinearLayout 包含有一个横纵都包裹内容的 TextView\n- 这个布局在运行时，Android 原生的布局引擎会遍历布局，根据控件的大小策略来进行 onMeasure、onLayout 操作\n- 这个过程是 Android 开发的基本功，也是面试的常考内容\n\n但是在本文中，我们要使用 Yoga 引擎来替换 Android 原生的布局引擎，因此上面的这些知识全部**不会**用到！我们需要将认知清空。\n\n## 用 Yoga 进行布局\n\n清空到什么程度呢？现在屏幕上只有一个坐标系。假设我们创建一个 TextView，如何将它摆到指定位置呢？通过向它指定 x、y 坐标。\n\nYoga 布局引擎实际上是一个数值计算引擎，它实际上是与 UI 视图无关的。\n\n在 Yoga 中，布局的每个元素都是一个节点(YogaNode)，这个 YogaNode 会代表界面上的某个元素（比如一个 TextView），但是两者没有直接关联。\n\n比如假设我们要在屏幕上横向展示三个方块，对应的[代码](https://github.com/maxiee/MaxieeRNLab/blob/master/android/app/src/main/java/com/maxieernlab/yoga/YogaActivity2.java)如下(Activity 的 onCreate 方法）:\n\n```java\nFrameLayout container = new FrameLayout(this);\n\n/**\n * 布局纯数值计算\n */\nfloat screenWidth = getWindowManager().getDefaultDisplay().getWidth();\nfloat screenHeight = getWindowManager().getDefaultDisplay().getHeight();\n\nYogaNode root = new YogaNode();\nroot.setWidth(screenWidth);\nroot.setHeight(screenHeight);\nroot.setFlexDirection(YogaFlexDirection.ROW);\n\nYogaNode rect1 = new YogaNode();\nrect1.setHeight(VIEW_WIDTH);\nrect1.setWidth(VIEW_WIDTH);\nrect1.setMargin(YogaEdge.ALL, 20);\n\nYogaNode rect2 = new YogaNode();\nrect2.setHeight(VIEW_WIDTH);\nrect2.setWidth(VIEW_WIDTH);\nrect2.setMargin(YogaEdge.ALL, 20);\n\nYogaNode rect3 = new YogaNode();\nrect3.setHeight(VIEW_WIDTH);\nrect3.setWidth(VIEW_WIDTH);\nrect3.setMargin(YogaEdge.ALL, 20);\n\nroot.addChildAt(rect1, 0);\nroot.addChildAt(rect2, 1);\nroot.addChildAt(rect3, 2);\n\n// 给定屏幕长宽，求解屏幕元素位置\nroot.calculateLayout(screenWidth, screenHeight);\n\n/**\n * Android 视图创建于定位\n */\nViewGroup.LayoutParams lp = new FrameLayout.LayoutParams(VIEW_WIDTH, VIEW_WIDTH);\n\nView v1 = new View(this);\nv1.setLayoutParams(lp);\nv1.setBackgroundColor(Color.parseColor(\"#d50000\"));\n\nView v2 = new View(this);\nv2.setLayoutParams(lp);\nv2.setBackgroundColor(Color.parseColor(\"#ff1744\"));\n\nView v3 = new View(this);\nv3.setLayoutParams(lp);\nv3.setBackgroundColor(Color.parseColor(\"#ff5252\"));\n\ncontainer.addView(v1);\ncontainer.addView(v2);\ncontainer.addView(v3);\n\nv1.setX(rect1.getLayoutX());\nv1.setY(rect1.getLayoutY());\nv2.setX(rect2.getLayoutX());\nv2.setY(rect2.getLayoutY());\nv3.setX(rect3.getLayoutX());\nv3.setY(rect3.getLayoutY());\n\nsetContentView(container);\n```\n\n其中：\n\n- 整个过程分为两个部分：Yoga 引擎布局纯数值计算、Android 视图创建于定位\n- 其中 YogaNode 完全是脱离 Android View 体系的，两者只要保持概念上的一致(一个控件的 Flexbox 定义好、YogaNode 设置多么大，视图控件也要设置多么大，两者保持一致)\n- 学习了 React Native 底层的 Yoga 布局引擎之后，我们再回头看 RN 的 Shadow Node 这个概念，就会有更好的理解了\n\n这段代码执行（clone [MaxieeRNLab](https://github.com/maxiee/MaxieeRNLab) 后编译参见效果）的效果如下：\n\n![](image/ReactNativeCode1201.png)\n\n## 更复杂一点的例子\n\n有了上一节的基础后，下面让我们来看一个更复杂一些的例子([完整代码](https://github.com/maxiee/MaxieeRNLab/blob/master/android/app/src/main/java/com/maxieernlab/yoga/YogaActivity1.java))：\n\n```java\npackage com.maxieernlab.yoga;\n\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v7.app.AppCompatActivity;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.FrameLayout;\n\nimport com.facebook.yoga.YogaEdge;\nimport com.facebook.yoga.YogaFlexDirection;\nimport com.facebook.yoga.YogaNode;\n\nimport java.util.ArrayList;\n\npublic class YogaActivity1 extends AppCompatActivity {\n    private static final int VIEW_WIDTH = 200;\n\n    private float screenHeight;\n    private float screenWidth;\n\n    private ArrayList<View> poolView = new ArrayList<>();\n    private ArrayList<YogaNode> poolNode = new ArrayList<>();\n\n    private String[][] colors = new String[][] {\n            new String[] { \"#d50000\", \"#ff1744\", \"#ff5252\", \"#ff8a80\" },\n            new String[] { \"#c51162\", \"#f50057\", \"#ff4081\", \"#ff80ab\" },\n            new String[] { \"#aa00ff\", \"#d500f9\", \"#e040fb\", \"#ea80fc\" },\n            new String[] { \"#6200ea\", \"#651fff\", \"#7c4dff\", \"#b388ff\" }\n    };\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        FrameLayout container = new FrameLayout(this);\n\n        screenWidth = getWindowManager().getDefaultDisplay().getWidth();\n        screenHeight = getWindowManager().getDefaultDisplay().getHeight();\n        log(\"Screen size = (%f, %f)\", screenWidth, screenHeight);\n\n        YogaNode root = new YogaNode();\n        root.setWidth(screenWidth);\n        root.setHeight(screenHeight);\n        root.setFlexDirection(YogaFlexDirection.COLUMN);\n\n        log(\"start\");\n        createRow1(root, 0);\n        createRow1(root, 1);\n        createRow1(root, 2);\n        createRow1(root, 3);\n\n        root.calculateLayout(screenWidth, screenHeight);\n\n        for (int i = 0; i < poolView.size(); i++) {\n            View v = poolView.get(i);\n            YogaNode n = poolNode.get(i);\n            YogaNode r = n.getOwner();\n            v.setX(r.getLayoutX() + n.getLayoutX());\n            v.setY(r.getLayoutY() + n.getLayoutY());\n            log(\"v%d position=(%f, %f)\",\n                    i,\n                    r.getLayoutX() + n.getLayoutX(),\n                    r.getLayoutY() + n.getLayoutY());\n            container.addView(v);\n        }\n\n        log(\"end\");\n\n        setContentView(container);\n    }\n\n    private void createRow1(YogaNode root, int index) {\n        log(\"create index = \" + index);\n        YogaNode row = new YogaNode();\n        row.setHeight(VIEW_WIDTH);\n        row.setWidth(VIEW_WIDTH * 4);\n        row.setFlexDirection(YogaFlexDirection.ROW);\n        row.setMargin(YogaEdge.ALL, 20);\n\n        for (int i = 0; i < 4; i++) {\n            YogaNode n = new YogaNode();\n            n.setWidth(VIEW_WIDTH);\n            n.setHeight(VIEW_WIDTH);\n            View v = createView(colors[index][i]);\n            row.addChildAt(n, i);\n            poolNode.add(n);\n            poolView.add(v);\n        }\n\n        root.addChildAt(row, index);\n    }\n\n    private View createView(String color) {\n        View v = new View(this);\n        v.setBackgroundColor(Color.parseColor(color));\n        ViewGroup.LayoutParams lp = new FrameLayout.LayoutParams(VIEW_WIDTH, VIEW_WIDTH);\n        v.setLayoutParams(lp);\n        return v;\n    }\n\n    private void log(String template, Object... objects) {\n        Log.d(\"max-yoga\", String.format(template, objects));\n    }\n}\n```\n\n效果图如下：\n\n![](image/ReactNativeCode1202.png)\n\n其中：\n\n- 需要注意的一点是，对于嵌套的 Node，它的 getLayoutX 和 getLayoutY 是相对于上级 Node 而言的\n- 因此如果要得到 Node 在屏幕上的绝对坐标，需要累加它所有父级的坐标\n\n## 小结\n\n至此我们就完成了对 React Native 底层布局引擎 Yoga 的学习。\n\n有了这一基础，下一节我们就可以向 React Native 的 UI 部分发起进攻了！😆"},"path":"post/ReactNativeCode12md"}
