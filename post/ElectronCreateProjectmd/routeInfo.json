{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"使用 electron-react-boilerplate 创建 Electron 工程","desc":"electron-react-boilerplate 是一个流行的 Electron-React 脚手架.在本文中记录了如何使用它来创建一个 Electron-React 工程.","type":"md","link":"ElectronCreateProjectmd","create":"2018-03-05","filename":"ElectronCreateProject.md"},"content":"electron-react-boilerplate 是一个流行的 Electron-React 脚手架. 在本文中记录了如何使用它来创建一个 Electron-React 工程.\n\n## 安装\n\n项目主页在[这里](https://github.com/chentsulin/electron-react-boilerplate), clone 这个项目到本地:\n\n```\ngit clone --depth=1 https://github.com/chentsulin/electron-react-boilerplate.git your-project-name\n```\n\n其中: your-project-name 表示在本地的目录名.\n\nclone 完毕后, 进入项目目录, 执行下面命令, 安装依赖:\n\n```\nsudo yarn\n```\n\n如果在国内, 问题就变得有点复杂了, 因为 Electron 的安装方式有所不同.\n\nElectron 的安装过程分为两步, 第一步它与普通的依赖一样通过 yarn 安装, 之后, 它有一个第二步 postInstall 的过程.\n\npostInstall 的过程需要再次联网下载 Electron 的二进制, 如果在国内的话, 这个网址是访问不到的, 这会造成联网失败.\n\n好消息是, 我们可以通过环境变量来改变这个下载地址, 通过以下代码:\n\n```\nsudo export ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/\n```\n\n如果是 Windows, 设置环境变量的方法如下:\n\n```\nset ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/\n```\n\n本文的安装环境为 macOS, 你会发现我上面 export 时使用了 sudo 提权, 这是为什么呢?\n\n这是因为 Electron 的 postInstall 需要把二进制安装到 /etc 中, 因此我们必须要申请 root 权限.\n\n如果顺利的话, 这样 Electron 就成功安装进项目的当中了.\n\n执行以下命令来启动 APP:\n\n```\nyarn run dev\n```\n\n项目应会正常启动。\n\n## 一个工程, 两个 package.json\n\n在这个项目中有两个 package.json:\n\n1. ./package.json\n2. ./app/package.json\n\n当我们添加一个 Module 时, 向其中哪一个添加呢? 规则如下:\n\n1. ./app/package.json: 用于添加原生 Module.\n2. ./package.json: 除了原生 Module 之外的都添加到这里.\n\n具体参见[这篇文章](https://www.electron.build/tutorials/two-package-structure)\n\n## 导入 CSS 模块\n\n如果需要向项目中导入全局 css 模块, 如 bootstrap 或者 semantic-ui, 需要向 .global.css 中添加:\n\n```css\n@import \"~bootstrap/dist/css/bootstrap.css\";\n```"},"path":"post/ElectronCreateProjectmd"}
