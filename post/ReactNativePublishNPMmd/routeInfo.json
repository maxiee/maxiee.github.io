{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"如何将 React Native 组件发布到 NPM 上——比你认为的要简单(翻译)","desc":"我发现没有太多讲怎么把 React Native 组件发布到 NPM 上的材料。因此我希望这篇文章能帮助别人让这个过程变得容易一些。","type":"md","link":"ReactNativePublishNPMmd","create":"2019-03-26","filename":"ReactNativePublishNPM.md"},"content":"## 前言\n\n本文的原作者是 [Colby Miller](https://medium.freecodecamp.org/@colbymiller)，文章源链接为 [How to publish a React Native component to NPM — it’s easier than you think](https://medium.freecodecamp.org/how-to-publish-a-react-native-component-to-npm-its-easier-than-you-think-51f6ae1ef850)，我将其翻译成中文。\n\n你想向开源社区做贡献吗？那很赞！帮助想当年轻的 React Native 社区成长是一件很棒的事情！\n\n当我在不久前打算进行这项任务的时候，我发现没有太多讲怎么把 React Native 组件发布到 NPM 上的材料。因此我希望这篇文章能帮助别人让这个过程变得容易一些。\n\n> 注：下面的实例代码均来自 [react-native-progress-steps](https://www.npmjs.com/package/react-native-progress-steps) 这是我的第一个 NPM 包。\n\n在我们开始之前，首先要注册一个 NPM 账号。你可以在[这里](https://www.npmjs.com/signup)注册。\n\n## 初始化设置\n\n首先，创建一个目录，React Native 组件将会位于这个目录中。\n\n```\nmkdir <folder_name> && cd <folder_name>\n\n# For example\nmkdir my-component && cd my-component\n```\n\n> 注：为了保持文章简洁，我假设你已经安装了 Node 和 NPM。如果没有的话，请参见[这篇文档](https://www.npmjs.com/get-npm)。\n\n进入创建的目录后，我们需要通过 `npm init` 命令来初始化 NPM 包。\n\n这会创建一个 `package.json` 文件，它内部有一些重要的关于 React Native 组件的元信息。\n\n命令会询问一系列问题，包括包名、版本、描述、关键字等等。\n\n**重要：**当被询问入口点(*entry point*)的时候，一定要输入 `index.js` 并回车。这会是导出你的主组件的文件。\n\npackage.json：\n\n```json\n{\n  \"name\": \"react-native-progress-steps\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple and fully customizable React Native component that implements a progress stepper UI.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/colbymillerdev/react-native-progress-steps.git\"\n  },\n  \"keywords\": [\n    \"react-native\",\n    \"react-component\",\n    \"react-native-component\",\n    \"react\",\n    \"react native\",\n    \"mobile\",\n    \"ios\",\n    \"android\",\n    \"ui\",\n    \"stepper\",\n    \"progress\",\n    \"progress-steps\"\n  ],\n  \"author\": \"Colby Miller\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/colbymillerdev/react-native-progress-steps/issues\"\n  },\n  \"homepage\": \"https://github.com/colbymillerdev/react-native-progress-steps#readme\"\n}\n```\n\n## 工程结构\n\n下一步是为你的 React Native 组件设置一个目录结构。\n\n这完全取决于你，下面我分享一下我的简单示例：\n\n![](image/ReactNativePublishNPM01.png)\n\n你会注意到有些文件不是我们创建的。我们后面会解释他们。\n\n首先我们创建 `index.js` 文件，这个文件最为重要，它的作用是导出/导入你的组件。\n\n将当且目录切到项目根目录，并执行命令 `touch index.js`。\n\n这个文件的内容有多种编写方法：\n\n- 直接在 `index.js` 中编写组件，并将它导出\n- 在单独的 JavaScript 文件中编写组件，在 `index.js` 中导出\n- 最后一种是，创建多个组件和容器的 JavaScript 文件，在 `index.js` 中导出必要的。在下面的示例中，我采用这个方法：\n\nindex.js：\n\n```js\nimport ProgressSteps from './src/ProgressSteps/ProgressSteps';\nimport ProgressStep from './src/ProgressSteps/ProgressStep';\n\nexport { ProgressSteps, ProgressStep };\n```\n\n不论采用哪种方法，这个文件最终导出的，是使用这个 APP 的库最终导入并展示的。这个很重要需要记住。\n\n```js\nimport { ProgressSteps, ProgressStep } from 'react-native-progress-steps';\n```\n\n## 依赖\n\n为了让我们的 React Native 组件正常工作，我们需要决定使用那些依赖。\n\n依赖分为三种类型：\n\n- **peerDependencies:** 组件需要这些依赖才能运行，他们被认为是已经安装在 APP 中。一个例子就是 `react-native` 本身。但是，在 React Native 的场景下，不需要把 `react-native` 作为一个 peer dependency。\n- **dependencies:** 这也是组件需要它们才能运行的依赖。但是你不用假设 APP 已经安装了这些依赖。一些例子包括 `lodash` 和 `prop-types`。\n- **devDependencies:** 这些依赖一看就知道。它们是在开发 React Native 组件时需要的依赖。例子包括你的 linter、测试框架和 babel。\n\n## 安装 Babel 依赖\n\n我们的下一步是将我们的组件与 Babel 建立关联。我们可以简单地通过安装下面的 dev dependency 完成这一步：\n\n```\nnpm install metro-react-native-babel-preset --save-dev\n```\n\n安装完成后，我们要创建一个 `.babelrc` 并添加如下内容：\n\n```js\n{\n\t\"presets\": [\"module:metro-react-native-babel-preset\"]\n}\n```\n\n## 创建 .gitignore 和 .npmignore\n\n最后一步是创建标准的 `.gitignore` 和 `.npmignore`，遵循最佳实践。这会避免在发布到 NPM 时遇到问题。\n\n.gitignore：\n\n```\n# Logs\n*.log\nnpm-debug.log\n\n# Runtime data\ntmp\nbuild\ndist\n\n# Dependency directory\nnode_modules\n```\n\n.npmignore：\n\n```\n# Logs\n*.log\nnpm-debug.log\n\n# Dependency directory\nnode_modules\n\n# Runtime data\ntmp\n\n# Examples (If applicable to your project)\nexamples\n```\n\n## 测试\n\n通常，在发布到 NPM 之前，我们可以直接将我们的包本地连接到 APP 上。\n\n这可以在包的根目录下使用 `npm link` 命令完成。之后，跳转到 APP 目录下，再输入  `npm link <package-name>` 之后再输入 `npm install` 完成连接。\n\n但是，在截止写本文的时间为止，React Native 和 `npm link` 命令还没发很好地一起工作。\n\n到目前为止，我找到了两个解决这个问题的方法：\n\n### ① 使用本地路径在应用中安装包\n\n要完成这个，进入 APP 目录并使用路径直接安装包：\n\n```\nnpm i <path_to_project>\n\n# For example\nnpm i ../my-component\n```\n\n当包代码改动之后，需要重新进入 APP 的目录重新安装依赖。\n\n这个方法不太理想，但是它可以工作。\n\n### ② 使用 npm pack 创建一个 Example 目录\n\n`npm pack` 命令是一种将你的 React Native 组件打包的好方法，并且是能够测试的。\n\n它会创建一个一个 .tgz 文件，之后被安装到一个线程的 APP 中。\n\n首先在包的根目录创建一个 `/examples` 目录，这个目录是一个 React Native 应用，主要目的是展示你的示例。\n\n这个目录可以通过 `react-native init examples` 命令创建。\n\n> 注意：这需要你的电脑上已经安装 React Native。你可以参见 Facebook 的[指南](https://facebook.github.io/react-native/docs/getting-started.html)。\n\n完成之后，执行 `npm pack` 命令，会创建一个文件，文件名类似于 `package-name-0.0.0.tgz`。\n\n之后进入 `/examples` 目录，安装你的组件，通过执行 `npm i ../package-name-0.0.0.tgz` 或者 `yarn add ../package-name-0.0.0.tgz`。记住分别替换 `package-name` 和 `0.0.0`。\n\n创建一个 JavaScript 文件来展示你的组件。在本例中，我们称其为  `ExampleOne.js`。需要指出的是，应该在这个文件中导入前面用 yarn 或 npm 安装的组件。\n\n一但文件被创建，打开 `App.js` 并导入/导出示例文件。\n\n这个文件中导出的内容是在模拟器或设备上运行项目时显示的内容。\n\nApp.js：\n\n```js\nimport ExampleOne from './ExampleOne'\n\nexport default ExampleOne;\n```\n\n最后，我们可以使用 `react-native run-ios` 或 `react-native run-android` 运行应用。\n\n现在我们应该能够看到我们的组件并正确地测试它。\n\n在你修改了 NPM 包之后，记住需要执行 `npm pack` 指令，之后进入  `/examples` 目录执行 `npm install` 或 `yarn add`。\n\n> 这种方法带来的好处是，别的用户可以运行你的示例工程。这样他们不用再应用中导入组件，就能先使用组件效果。同时，`.tgz`  文件也能很容易地在协作者之间共享。\n\n## 发布到 NPM\n\n最后，我们已经准备好把我们的 React Native 组件分享到超赞的开源社区了！\n\n发布非常简单快速。只需要使用 `npm login` 登录 NPM 账号，之后使用 `npm publish` 进行发布。\n\n有一点需要注意的是 NPM 要求我们每次发布前递增版本号。\n\n## 结论\n\n在本文中我们总结了大量材料。如果你遇到问题请再下面评论提问。\n\n感谢阅读，我期待你的创造！\n\n[*react-native-progress-steps*](https://www.npmjs.com/package/react-native-progress-steps) 也欢迎贡献，PR 建议都欢迎提出！\n\n## 译者注\n\n在读完后，我对 examples 文件夹还有一点疑问。\n\n在使用《使用 npm pack 创建一个 Example 目录》一节中通过 `react-native init examples` 命令创建工程，但在项目的[实际目录](https://github.com/colbymillerdev/react-native-progress-steps/tree/develop/examples)下并非这样，它不是一个 React Native 工程。\n\n我目前的猜测是作者没有提交 examples 下的所有文件，而是只提交了必要的文件。\n\n\n\n\n\n\n\n"},"path":"post/ReactNativePublishNPMmd"}
