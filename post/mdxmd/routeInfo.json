{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"MDX -- 支持 React JSX 的 Markdown 超集","desc":"最近在物色给我的博客 maxiee.github.io 寻找 markdown 引擎，最终找到 MDX 这个库正式我需要的，它支持在 Markdown 中添加 React JSX，既满足了 Markdown 的快捷，又满足了 React JSX 的强大扩展。","type":"md","link":"mdxmd","create":"2018-11-04","filename":"mdx.md"},"content":"## 前言\n\n最近我一直在寻找书写博客的最佳方式，既要能自由书写，也要能够精准地把控布局。\n\n为此，我分别试验了几种书写方式：\n\n- 手写 JSX\n- 将 JSX 封装成 DSL\n- Markdown\n\n其中：\n\n- JSX、DSL 虽然能够精准把控，但是写起来太累了，自己要写很多胶水\n- Markdown 虽然书写自由，但是布局、功能都难以精确控制\n\n正当苦恼的时候，网上的朋友指点我说，有一种 Markdown 的扩展，可以在其中混写 JSX。\n\n这正是我需要的！经过调研，我发现了 [mdx-js/mdx](https://github.com/mdx-js/mdx) 这个库。\n\n这个库的介绍如下：\n\n> JSX in Markdown for ambitious projects\n>\n> 为雄心勃勃的项目提供的在 Markdown 中书写 JSX 的方式\n\n需要注意的是，mdx 库默认使用的扩展名是 .mdx。\n\n## 安装\n\nReact 版本：\n\n在安装之前，首先要检查自己项目中 React 版本，根据这个 [issue](https://github.com/mdx-js/mdx/issues/178) 所描述的，React 的版本必须 16.3+。seddd\n\n这个库的安装文档我有点没看懂，因此自己根据 example 摸索着手动安装。\n\n安装以下依赖：\u0003\n\n```\nyarn add create-react-context\nyarn add @mdx-js/loader\nyarn add @mdx-js/mdx\n```\n\n之后配置 webpack， .mdx 后缀使用 @mdx-js/mdx 加载器（注意：我选择延续使用 .md 扩展名）：\n\n```js\n{ test: /\\.md$/, exclude: /node_modules/, loader: ['babel-loader', '@mdx-js/loader']},\n```\n\n其中：mdx 的 loader 需要与 babel-loader 组合使用。\n\n## 使用\n\n本节介绍如何在项目中添加 mdx 组件，实现加载 Markdown（mdx 文件）。\n\n首先我们先大概地了解下整体过程：\n\n- MDXProvider 组件负责将 mdx 文件转换为 React nodes，它接收两个参数，一个是 mdx 文件的内容，另一个是 html 标签到 React 标签的映射规则\n- 因此我们首先要建立映射规则\n- 之后导入 mdx 文件\n- 最后将它俩传给 MDXProvider\n\n具体代码如下：\n\n### 建立映射关系\n\n```jsx\nconst RList = (props) => {\n    return <List bulleted>{props.children}</List>\n}\n\nconst ROList = (props) => <List ordered>{props.children}</List>\n\nconst RListItem = (props) => {\n    return <List.Item>{props.children}</List.Item>\n}\n\nconst Quote = (props) => <Message color='orange'>{props.children}</Message>\n\nconst RTable = (props) => <Table celled>{props.children}</Table>\nconst components = {\n    h1: H1,\n    h2: H2,\n    h3: H3,\n    h4: H4,\n    code: Code,\n    ul: RList,\n    ol: ROList,\n    li: RListItem,\n    blockquote: Quote,\n    table: RTable\n}\n```\n\n其中：\n\n- 我是基于 [Semantic-React-UI](https://react.semantic-ui.com/) 库进行的二次封装。\n- 重点在 componets 这个结构，markdown 的各种元素（标题、代码）最终会被转换成 h1、code。\n- 通过 componets 再将 h1、code 转换为对应的 React 节点。\n\n### 导入 Markdown  文件\n\n下面需要导入 Markdown 文件，具体导入方式有两种：\n\n- **同步导入：**Webpack 在打包时会将 Markdown 编译到页面中，形成一个整体 bundle\n- **异步导入：**文章与页面是分离的两个 bundle，页面在运行时异步加载文章 bundle。这个比较适合博客框架，一个页面的框架动态加载不同的文章。\n\n同步的写法是在代码的开头直接 import：\n\n```\nimport MD from 'content/blog/posts/Rxjava3.md';\n```\n\n异步的写法是使用 import() 方法：\n\n```jsx\nimport('content/blog/posts/' + post.link).then(v => {\n    let Article = v.default\n    ...\n})\n```\n\n在使用时，MD 或 Article 作为 React 组件使用。\n\n### MDXProvider\n\n下面来在 render 中写 MDXProvider：\n\n```jsx\n<MDXProvider components={components}><Article/></MDXProvider>\n```\n\n这样就大功告成了。\n\n我们再来回顾一下整个流程：\n\n- 首先我们在项目中以 mdx 语法编写文章\n- 这些文章在构建时，Webpack 会通过 @mdx-js/loader 对其进行转化，转换成一个格式为 MDXAST 的 React 语法树组件\n- 我们在代码中定义语法组件映射表\n- 在运行时导入转换后的 mdx 文件和映射表，MDXProvider 会在两者之间建立关联\n- 最后文章展示在页面上\n\n## 语法\n\nMDX 的语法是 Markdown 语法的超集，Markdown 语法自然不必多说，下面详细说超出的那一部分。\n\n### JSX 组件\n\nJSX 组件直接使用：\n\n```jsx\n<Box>\n  <Heading>Here's a JSX block</Heading>\n  <Text>It's pretty neat</Text>\n</Box>\n```\n\n### 导入\n\n组件在使用时需要进行导入：\n\n```jsx\nimport Graph from './components/graph'\n\n## Here's a graph\n\n<Graph />\n```\n\n同时，也允许导入其他数据，比如导入外部的 md 文档：\n\n```jsx\nimport License from './license.md'\nimport Contributing from './docs/contributing.md'\n\n# Hello, world!\n\n<License />\n\n---\n\n<Contributing />\n```\n\n## 测试\n\n我尝试着引用一个 React 组件：\n\nimport DefaultBarChart from \"components/d3/DefaultBarChart\"\n\n<DefaultBarChart data={[1,2,3,4]} size={[500, 200]} />\n\n可见导入成功了，上面这段代码输入的是：\n\n```jsx\nimport DefaultBarChart from \"components/d3/DefaultBarChart\"\n\n<DefaultBarChart data={[1,2,3,4]} size={[500, 200]} />\n```\n\n我发现，JSX 必须写在一行里面，如果拆分多行写会报错。\n\n## 网络资源\n\n- [frontarm/mdx-util](https://github.com/frontarm/mdx-util)\n- [Writing Interactive Documents in Markdown with MDX](https://medium.com/@alexkrolick/writing-interactive-documents-in-markdown-with-mdx-4b6dd7db683d)\n\n"},"path":"post/mdxmd"}
