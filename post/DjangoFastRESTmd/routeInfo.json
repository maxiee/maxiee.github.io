{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"Django 快速 RESTful API 开发","desc":"在后端开发中，最核心、最基础的事情是定义数据结构，定义好数据结构后，需要对外提供增删改查（CRUD）的接口，CRUD 是个苦力活。有没有可能开发者只关心数据结构定义，由网络框架自动提供一系列 CRUD 方法呢？答案是肯定的。虽然如此，我在工作中还是看到人们一遍遍、一层层、反反复复地写这些重复代码，以至于占用了工作中的想当一部分精力。后端工作的核心不应该浪费在反复刷胶水上，而是应该放在更深层次的架构设计和商业模式思考上。在本文中，我选用 Django 网络框架，结合它的 RESTframework 扩展，来介绍这种技术。本文假设读者有后端开发基础，并熟悉 Django 框架的使用，不是一个 Step by Step Tutorial。","type":"md","link":"DjangoFastRESTmd","create":"2018-11-09","filename":"DjangoFastREST.md"},"content":"## 前言\n\n在后端开发中，最核心、最基础的事情是定义数据结构，定义好数据结构后，需要对外提供增删改查（CRUD）的接口，CRUD 是个苦力活。有没有可能开发者只关心数据结构定义，由网络框架自动提供一系列 CRUD 方法呢？答案是肯定的。\n\n虽然如此，我在工作中还是看到人们一遍遍、一层层、反反复复地写这些重复代码，以至于占用了工作中的想当一部分精力。后端工作的核心不应该浪费在反复刷胶水上，而是应该放在更深层次的架构设计和商业模式思考上。\n\n在本文中，我选用 [Django](https://www.djangoproject.com/) 网络框架，结合它的 [RESTframework](https://www.django-rest-framework.org/) 扩展，来介绍这种技术。本文假设读者有后端开发基础，并熟悉 Django 框架的使用，不是一个 Step by Step Tutorial。\n\n## 定义模型\n\n假设我们要搭建一个应用商店（AppStore）应用，Model 如下：\n\napp/models.py：\n\n```python\nclass App(models.Model):\n    name = models.CharField(max_length=50)\n    developer = models.ForeignKey(Developer, on_delete=models.CASCADE, null=True)\n    appid = models.CharField(max_length=20)\n    intro = models.TextField()\n```\n\ndeveloper/models.py:\n\n```python\nclass Developer(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n```\n\n## 绑定框架\n\n上面的模型定义好，API 开发工作就完成了 80% 了，剩下的工作都交给框架，以 app application\n\n为例。\n\n创建 app 的序列化器 app/serializers.py：\n\n```python\nclass AppSerializers(ModelSerializer):\n    class Meta:\n        model = App\n        fields = ('name', 'developer', 'appid', 'intro')\n```\n\nMagic happens 的地方，自动创建一系列 API app/views.py：\n\n```python\nfrom rest_framework import generics\n\nfrom .models import App\nfrom .serializers import AppSerializers\n\nclass AppList(generics.ListCreateAPIView):\n    queryset = App.objects.all()\n    serializer_class = AppSerializers\n    filter_fields = ('developer',)\n\nclass AppDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = App.objects.all()\n    serializer_class = AppSerializers\n```\n\n最后，注册一下 URL，app/urls.py：\n\n```python\nfrom django.urls import path\nfrom app import views\n\nurlpatterns = [\n    path('apps/', views.AppList.as_view()),\n    path('apps/<int:pk>', views.AppDetail.as_view())\n]\n```\n\n## 大功告成！\n\n至此，工作就完成了！我省略了一些细碎的步骤，那些都属于 Django 基础，不再赘述。\n\n我们获得了哪些接口呢？\n\n| 接口               | METHOD | 说明                 |\n| ------------------ | ------ | -------------------- |\n| /apps              | GET    | 列表获取（支持分页） |\n| /apps              | POST   | 列表提交             |\n| /apps/?developer=1 | GET    | 字段检索             |\n| /apps/1            | GET    | 单条检索             |\n| /apps/1            | DELETE | 单条删除             |\n| /apps/1            | POST   | 单条创建 or 更新     |\n| /apps/1            | UPDATE | 单条更新             |\n\n从中可见，常用的 RESTful 都已经创建完成，我们一共写了不到 20 行代码。\n\n到这里并没有结束，restframework 还自动为我们创建了一个调试网站：\n\n![](image/restframework1.png)\n\n我们在其中可以校验数据类型、添加修改数据等进行快速调试。\n\n## Options\n\n我还学习到 RESTful 有一个 OPTIONS 方法，这个方法的作用是返回接口的数据定义：\n\n```json\n{\n    \"name\": \"App Detail\",\n    \"description\": \"\",\n    \"renders\": [\n        \"application/json\",\n        \"text/html\"\n    ],\n    \"parses\": [\n        \"application/json\",\n        \"application/x-www-form-urlencoded\",\n        \"multipart/form-data\"\n    ],\n    \"actions\": {\n        \"PUT\": {\n            \"name\": {\n                \"type\": \"string\",\n                \"required\": true,\n                \"read_only\": false,\n                \"label\": \"Name\",\n                \"max_length\": 50\n            },\n            \"developer\": {\n                \"type\": \"field\",\n                \"required\": false,\n                \"read_only\": false,\n                \"label\": \"Developer\"\n            }\n        }\n    }\n}\n```\n\n如此说来，我们在 App 中根本都不需要再写 Entity 了。直接访问接口得到 JSON 数据，根据本地缓存的 OPTIONS 进行解析，如果解析失败，则去拉取最新的 OPTIONS 进行解析。\n\n没想到不仅后端省事，前端都跟着省事了。先进技术真是第一生产力！\n\n## 高级功能\n\nCRUD 太基础了，在商业应用中还需要支持的特性有：\n\n- 鉴权\n- 校验\n- 限流\n- 缓存\n- 版本管理\n- ……\n\n这些 restframework 都是支持的，具体参见其[官网](https://www.django-rest-framework.org/)的 API Guide 部分。基本上都可以通过几行代码实现。\n\n## 总结\n\n本文的主要目的不是安利 Python、Django，因为在公司里 PHP 还是主流，并且 PHP 工程师在招人上有极大优势，我无意改变。\n\n我的主要目的是分享快速 RESTful API 开发的思想，因为我看到业务中还有很多人在一遍一遍、反反复复地写这些本应该自动生成的接口，浪费了大量的精力，以至于反而没有时间对架构、业务进行更好的设计。\n\n语言、框架不是障碍，PHP 与 Python 一样都是脚本语言，上面的这些特性在 PHP 中同样能够轻易实现。后续我会去看看在 Laravel 中是否有同类的框架。"},"path":"post/DjangoFastRESTmd"}
