{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"在 React 中使用 D3","desc":"React 和 D3 都是十分出色的框架, 如何在 React 中使用 D3? 若有 D3 相助, React 应用的表现力将会更上一个台阶.","type":"md","link":"UseD3InReactmd","create":"2018-03-04","filename":"UseD3InReact.md"},"content":"React 和 D3 都是十分出色的框架, 如何在 React 中使用 D3? 若有 D3 相助, React 应用的表现力将会更上一个台阶.\n\n本文是对 [Interactive Applications with React & D3](https://medium.com/@Elijah_Meeks/interactive-applications-with-react-d3-f76f7b3ebc71) 的学习笔记.\n\n## 安装\n\n通过以下命令安装:\n\n```\nyarn add d3\n```\n\n## 结合的难点\n\n在 React 中结合 D3 的难点在于, 两个框架都是操作 DOM 的框架, 两者各有各的操纵方法, 两者之间是不兼容的.\n\n解决这一问题的结合方法是, React 负责应用的结构, 在需要可视化的地方, 创建一个 svg, 传给 D3, D3 在 svg 内部施展操作.\n\n## 示例\n\n编写一个 React 结合 D3 的柱状图组件, 实现代码如下:\n\n```jsx\nimport React, { Component } from 'react';\nimport { scaleLinear } from 'd3';\nimport { max } from 'd3';\nimport { select } from 'd3';\n\nclass BarChart extends Component {\n    constructor(props){\n        super(props);\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n\n    componentDidMount() {\n        this.createBarChart()\n    }\n\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n\n    createBarChart() {\n        const node = this.node;\n        const dataMax = max(this.props.data);\n\n        const yScale = scaleLinear()\n            .domain([0, dataMax])\n            .range([0, this.props.size[1]]);\n\n        select(node)\n            .selectAll('rect')\n            .data(this.props.data)\n            .enter()\n            .append('rect');\n\n        select(node)\n            .selectAll('rect')\n            .data(this.props.data)\n            .exit()\n            .remove();\n\n        select(node)\n            .selectAll('rect')\n            .data(this.props.data)\n            .style('fill', '#fe9922')\n            .attr('x', (d,i) => i * 25)\n            .attr('y', d => this.props.size[1] - yScale(d))\n            .attr('height', d => yScale(d))\n            .attr('width', 25)\n    }\n    render() {\n        return <svg ref={node => this.node = node}\n                    width={this.props.width}\n                    height={this.props.height}>\n        </svg>\n    }\n}\n```\n\n调用方法:\n\n```jsx\n<BarChart\n    data={[1,2,3,4]}\n    size={[500, 200]} />\n```\n\n## 总结\n\n至此, 就完成了 React 与 D3 的结合."},"path":"post/UseD3InReactmd"}
