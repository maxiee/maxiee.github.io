{"template":"/home/maxiee/Code/Blog/maxiee.github.io/src/pages/post","sharedHashesByProp":{},"data":{"post":{"name":"React Navigation 自定义 Tab Bar（翻译）","desc":"React Navigation 为我们提供了许多开箱即用的 navigators。但是文档并没有告诉你，如何添加一个函数，来验证路由跳转时的有效性。也没有告诉你，如何添加一个特殊的 UI（比如在 Tab Bar 中央添加一个添加按钮）。这些事情通过自定义 Tab Bar 都可以实现。","type":"md","link":"ReactNavigationCustomTabBarmd","create":"2019-03-03","filename":"ReactNavigationCustomTabBar.md"},"content":"## 前言\n\n本文的原作者是 [Shihao Xia](https://medium.com/@sxia)，文章[源链接](https://medium.com/@sxia/how-to-customize-tab-bar-in-react-navigation-a0dc6d4d7e61)，我将其翻译为中文。\n\n许多人在 React Native 应用中使用 [React Navigation](https://reactnavigation.org/)。React Navigation 为我们提供了许多开箱即用的 navigators。\n\n其中 TabNavigator 是最重要的也是最常用的。\n\nTabNavigator 非常灵活。在它的 [API 文档](https://reactnavigation.org/docs/tab-navigator.html)中，它提供了几乎对 Tab Bar 所有方面的可定制性。\n\n但是在文档中，只对如何自定义按钮图标、名称进行了讲解，并没有讲清楚该如何自定义 Tab Bar 本身。\n\n例如，文档并没有告诉你，如何添加一个函数，来验证路由跳转时的有效性。也没有告诉你，如何添加一个特殊的 UI（比如在 Tab Bar 中央添加一个添加按钮）。\n\n这些事情通过自定义 Tab Bar 都可以实现。\n\n## 创建 Tab Bar\n\n首先创建一个新文件，YourTabBar.js：\n\n```js\n//YourTabBar.js\nimport React, {Component} from 'react';\nimport { View } from 'react-native';\nexport class YourTabBar extends Component {\n    render(){\n        return <View />\n    }\n}\n```\n\n假设 YourTabBar 就是你的自定义 Tab Bar，使用方式如下：\n\n```js\nimport { YourTabBar } from './YourTabBar.js';\nexport default TabNavigator(\n  { ... },\n  {\n    tabBarComponent: YourTabBar,  \n  }\n);\n```\n\n赞！现在你已经有了自己的 Tab Bar 了。不过显然是空的，只有一个 `<View/>`。\n\n如果你向 TabNavigator 的 RouteConfigs 中添加配置，`<YourTabBar />` 将什么也展示不出来。\n\n下面我们来看，如何在组件中解析设置，并将它们合适地展示出来。\n\n如果你在组件中使用 `console.log(this.props) ` 打印 props，将会看到：\n\n```js\n{\n    activeTintColor: \"...\",\n    animationEnabled: false,\n    getLabel: function,\n    navigation: object,\n    navigationState: object { routes: array, index: 0, ...},\n    ...\n}\n```\n\n从中可以看出，我们需要的都被包含在 this.props 里面了。所有我们需要做的，就是从中取出我们所需要的。\n\n下面是最终的代码：\n\n```js\nimport React from 'react';\nimport { Component } from 'react';\nimport {\n    TouchableOpacity,\n    Text,\n    View,\n    Image\n} from 'react-native';\nimport { TabBarBottomProps, NavigationRoute } from 'react-navigation';\n\n// just for ide hints\ninterface TabBarProps extends TabBarBottomProps {}\n\ninterface TabBarState {}\n\nclass TabBar extends Component<TabBarProps, TabBarState> {\n\n    navigationStateIndex = null;\n    \n    // call when each time user click different tab\n    // 当用户点击不同的 Tab 时会首先进入这个函数\n    // 通过这个函数决定是否要拦截跳转\n    navigationAvaliableFuncs: {\n        [key: string]: () => boolean\n    } = {\n            //Account: this._needSignIn.bind(this),\n            //Progress: this._needSignIn.bind(this),\n        }\n  \n    // call when clicking tab got refused\n    // 跳转被拦截后会进入这个函数\n    navigationRefusedFuncs: {\n        [key: string]: () => void\n    } = {\n            Account: this._refusedByNeedSignIn.bind(this),\n            Progress: this._refusedByNeedSignIn.bind(this)\n        }\n\n    constructor(props: TabBarProps) {\n        super(props);\n    }\n\n    /*  _needSignIn() {\n        return !!this.props.authToken;\n    } */\n\n    /*_refusedByNeedSignIn() {\n        const { navigation } = this.props;\n        navigation.navigate('...');\n    }*/\n  \n    // Main function to render tabbar\n    // 这个函数用于展示 tabbar\n    renderTabBarButton(route: NavigationRoute, idx: any) {\n        // 从 props 中取出展示相关的属性\n        const {\n            activeTintColor,\t// 活跃高亮色\n            inactiveTintColor,\t// 非活跃高亮色\n            navigation,\t\t\t// Navigation 对象\n            getLabelText,\t\t// 标题获取函数\n            renderIcon,\t\t\t// 图标\n        } = this.props;\n        // 获取当前 Tab 索引\n        const currentIndex = navigation.state.index;\n        // 判断使用哪种高亮色\n        const color = currentIndex === idx ? activeTintColor : inactiveTintColor;\n        // 获取标题\n        const label = getLabelText({ route, focused: currentIndex === idx, index: idx });\n        return (\n            <TouchableOpacity\n                onPress={() => {\n                    if (currentIndex != idx) {\n                        if (this.isNavigateAvaliable(label as string)) {\n                            navigation.navigate(route.routeName);\n                        } else {\n                            this._onNavigationRefused(label as string);\n                        }\n                    }\n                }}\n                style={StdStyles.tabBarButton}\n                key={route.routeName}\n            >\n                {renderIcon({ route, tintColor: color, focused: currentIndex === idx, index: idx })}\n                // uncomment if you need title under tab\n                {/* <Text style={[ StdStyles.tabBarButtonText, { color }]}>\n                    {label}\n                </Text>  */}\n            </TouchableOpacity>\n        );\n    }\n\n    isNavigateAvaliable(label: string) {\n        const func: any = this.navigationAvaliableFuncs[label];\n        if (func) {\n            return func();\n        }\n        return true;\n    }\n\n    _onNavigationRefused(label: string) {\n        const func = this.navigationRefusedFuncs[label];\n        if (func) {\n            func();\n        }\n    }\n\n    render() {\n        \n        const { navigation, style } = this.props;\n        const tabBarButtons = navigation.state.routes.map(this.renderTabBarButton.bind(this));\n        return (\n            <View style={[StdStyles.tabBar, style]}>\n                {tabBarButtons}\n            </View>\n        );\n    }\n}\n\n// Possible extension with redux\n// function mapStateToProps(state: any) {\n//    return {\n//        ....,\n//    }\n// }\n// function mapDispatchToProps(dispatch) {\n//     return bindActionCreators(..., dispatch);\n// }\n// const _TabBar = connect(mapStateToProps)(TabBar);\n// export { _TabBar as TabBar };\n```\n\n其中：\n\n- 为帮助理解，我添加了一些中文注释\n- 代码中包含有拦截器逻辑，这个非常有用\n\n现在你的自定义 Tab 就可以正常工作了！\n\n## 向 Tab Bar 中添加按钮\n\n如何向 Tab Bar 中添加特殊按钮呢？\n\n比如像下图这样，添加一个照相机按钮：\n\n![](image/ReactNavigationCustomTabBar1.png)\n\n注：此图引用自 StackOverflow 13598600\n\n如何实现呢？回到我们上面代码中的 render 函数，在函数中通过 map 将 routes 转换为 Tab 组件。我们需要做的，只是制作一个 Camera 组件，然后添加到这个数组当中。是不是很简单呢？\n\n## 拦截路由行为\n\n如何拒绝一个路由行为呢？假设有的 Tab 只有已登录用户才能访问，但是未登录的用户点击了它，怎么办？\n\n 所需要做的是修改 TouchableOpacity 的点击事件，向上面的代码那样，通过两个函数（navigationAvaliableFuncs、navigationRefusedFuncs）来处理拦截逻辑。\n\n## 07/08/2018 更新\n\n由于 React Navigation 升级到第 2 版了，可能会有一些 API 调整。但是主要的思路还是一样的。如果有些属性没有了，只需要把 navigation props 打印出来，我相信像你这么聪明的小哥一定能搞定的 :)\n\n本文给出的自定义 Tab 的例子，应该是支持 react navigation 2 ，特性如下：\n\n- 通过回调函数判断 Tab 点击的有效性\n- TypeScript\n- 支持与 react-redux 的集成\n\n"},"path":"post/ReactNavigationCustomTabBarmd"}
